#include "COLOFUNC.acs"

#DEFINE PALETTE_SIZE 256
#DEFINE PALETTE_VAL 3 //r,g,b >_>
int palette_data[PALETTE_SIZE][PALETTE_VAL] = 
{
{0, 0, 0}, 
{31, 23, 11}, 
{23, 15, 7}, 
{75, 75, 75}, 
{255, 255, 255}, 
{27, 27, 27}, 
{19, 19, 19}, 
{11, 11, 11}, 
{7, 7, 7}, 
{47, 55, 31}, 
{35, 43, 15}, 
{23, 31, 7}, 
{15, 23, 0}, 
{79, 59, 43}, 
{71, 51, 35}, 
{63, 43, 27}, 
{255, 183, 183}, 
{247, 171, 171}, 
{243, 163, 163}, 
{235, 151, 151}, 
{231, 143, 143}, 
{223, 135, 135}, 
{219, 123, 123}, 
{211, 115, 115}, 
{203, 107, 107}, 
{199, 99, 99}, 
{191, 91, 91}, 
{187, 87, 87}, 
{179, 79, 79}, 
{175, 71, 71}, 
{167, 63, 63}, 
{163, 59, 59}, 
{248, 216, 248}, 
{248, 192, 248}, 
{248, 184, 248}, 
{255, 184, 232}, 
{248, 192, 216}, 
{248, 184, 176}, 
{248, 112, 176}, 
{255, 96, 176}, 
{216, 64, 96}, 
{224, 0, 88}, 
{216, 40, 0}, 
{176, 16, 48}, 
{168, 0, 16}, 
{160, 0, 0}, 
{136, 20, 0}, 
{120, 8, 0}, 
{255, 235, 223}, 
{255, 227, 211}, 
{255, 219, 199}, 
{255, 211, 187}, 
{255, 207, 179}, 
{255, 199, 167}, 
{255, 191, 155}, 
{255, 187, 147}, 
{224, 176, 255}, 
{160, 136, 248}, 
{152, 120, 248}, 
{160, 112, 255}, 
{104, 68, 252}, 
{144, 64, 240}, 
{128, 0, 240}, 
{96, 16, 160}, 
{208, 200, 248}, 
{216, 184, 248}, 
{192, 176, 255}, 
{184, 184, 248}, 
{160, 184, 255}, 
{96, 160, 255}, 
{104, 136, 252}, 
{88, 144, 248}, 
{80, 128, 255}, 
{64, 96, 248}, 
{0, 112, 232}, 
{0, 88, 248}, 
{64, 64, 255}, 
{48, 80, 128}, 
{24, 56, 88}, 
{64, 0, 152}, 
{239, 239, 239}, 
{231, 231, 231}, 
{223, 223, 223}, 
{219, 219, 219}, 
{211, 211, 211}, 
{203, 203, 203}, 
{199, 199, 199}, 
{191, 191, 191}, 
{183, 183, 183}, 
{179, 179, 179}, 
{171, 171, 171}, 
{167, 167, 167}, 
{159, 159, 159}, 
{124, 124, 124}, 
{120, 120, 120}, 
{112, 112, 112}, 
{184, 248, 216}, 
{176, 248, 200}, 
{160, 255, 200}, 
{168, 240, 184}, 
{184, 248, 184}, 
{160, 240, 160}, 
{112, 224, 144}, 
{88, 248, 152}, 
{184, 248, 24}, 
{152, 232, 0}, 
{128, 208, 16}, 
{112, 240, 64}, 
{88, 216, 84}, 
{72, 216, 72}, 
{0, 184, 0}, 
{72, 168, 16}, 
{80, 160, 0}, 
{56, 108, 0}, 
{56, 104, 0}, 
{72, 88, 0}, 
{72, 160, 104}, 
{0, 168, 68}, 
{0, 144, 56}, 
{48, 96, 64}, 
{63, 131, 47}, 
{55, 115, 43}, 
{47, 99, 35}, 
{39, 83, 27}, 
{31, 67, 23}, 
{23, 51, 15}, 
{19, 35, 11}, 
{11, 23, 7}, 
{0, 168, 0}, 
{0, 144, 0}, 
{0, 120, 0}, 
{0, 104, 0}, 
{0, 88, 0}, 
{0, 80, 0}, 
{0, 64, 0}, 
{0, 56, 16}, 
{224, 248, 160}, 
{200, 240, 128}, 
{216, 248, 120}, 
{136, 136, 0}, 
{103, 83, 63}, 
{95, 75, 55}, 
{87, 67, 51}, 
{83, 63, 47}, 
{159, 131, 99}, 
{143, 119, 83}, 
{131, 107, 75}, 
{119, 95, 63}, 
{103, 83, 51}, 
{91, 71, 43}, 
{79, 59, 35}, 
{67, 51, 27}, 
{123, 127, 99}, 
{111, 115, 87}, 
{103, 107, 79}, 
{91, 99, 71}, 
{83, 87, 59}, 
{71, 79, 51}, 
{63, 71, 43}, 
{55, 63, 39}, 
{255, 255, 115}, 
{235, 219, 87}, 
{215, 187, 67}, 
{195, 155, 47}, 
{175, 123, 31}, 
{155, 91, 19}, 
{135, 67, 7}, 
{115, 43, 0}, 
{252, 252, 252}, 
{255, 219, 219}, 
{255, 187, 187}, 
{255, 155, 155}, 
{255, 123, 123}, 
{255, 95, 95}, 
{255, 63, 63}, 
{255, 31, 31}, 
{255, 0, 0}, 
{239, 0, 0}, 
{227, 0, 0}, 
{215, 0, 0}, 
{203, 0, 0}, 
{191, 0, 0}, 
{179, 0, 0}, 
{167, 0, 0}, 
{155, 0, 0}, 
{139, 0, 0}, 
{127, 0, 0}, 
{115, 0, 0}, 
{103, 0, 0}, 
{91, 0, 0}, 
{79, 0, 0}, 
{67, 0, 0}, 
{0, 248, 252}, 
{0, 232, 228}, 
{0, 136, 148}, 
{0, 64, 88}, 
{164, 232, 252}, 
{56, 192, 252}, 
{0, 120, 252}, 
{0, 0, 252}, 
{192, 208, 248}, 
{168, 224, 248}, 
{152, 248, 240}, 
{144, 208, 255}, 
{96, 208, 224}, 
{56, 184, 248}, 
{64, 144, 192}, 
{0, 128, 136}, 
{248, 248, 248}, 
{255, 235, 219}, 
{252, 224, 168}, 
{248, 216, 168}, 
{255, 216, 160}, 
{248, 224, 160}, 
{255, 240, 144}, 
{248, 216, 120}, 
{252, 160, 68}, 
{248, 152, 56}, 
{255, 160, 0}, 
{255, 120, 48}, 
{228, 92, 16}, 
{224, 80, 0}, 
{200, 72, 8}, 
{160, 48, 0}, 
{255, 200, 184}, 
{248, 120, 88}, 
{255, 120, 48}, 
{248, 56, 0}, 
{232, 208, 32}, 
{248, 184, 0}, 
{172, 124, 0}, 
{136, 112, 0}, 
{192, 112, 0}, 
{120, 64, 0}, 
{80, 48, 0}, 
{64, 40, 0}, 
{248, 120, 248}, 
{240, 96, 255}, 
{216, 64, 192}, 
{216, 0, 204}, 
{0, 128, 136}, 
{0, 0, 188}, 
{40, 0, 184}, 
{32, 0, 176}, 
{0, 0, 168}, 
{32, 24, 136}, 
{96, 32, 192}, 
{0, 0, 0}, 
{236, 184, 68}, 
{68, 40, 188}, 
{255, 123, 255}, 
{184, 0, 184}, 
{152, 32, 120}, 
{148, 0, 132}, 
{136, 0, 112}, 
{167, 107, 107}
};

function int RGBFromPalette(int pal) {
	return rgbTriplet(palette_data[pal][0], palette_data[pal][1], palette_data[pal][2]);
}

function int PaletteMap(int rgb) {
	if(unpackByte4(rgb) != 0) {return rgb;}

	int red = unpackByte1(rgb);
	int green = unpackByte2(rgb);
	int blue = unpackByte3(rgb);

	if(red == 0 && green == 0 && blue == 0) {return 0;}

    int bestcolor = 0;
    int bestdist = 256*256+256*256+256*256;
	int dist;

	for(int i = bestcolor; i < PALETTE_SIZE; i++) {
		dist = (red - palette_data[i][0]) * (red - palette_data[i][0]) +
			(green - palette_data[i][1]) * (green - palette_data[i][1]) +
			(blue - palette_data[i][2]) * (blue - palette_data[i][2]);

		if(dist <= bestdist) {
			bestcolor = i;
			if(dist == 0) {
				return bestcolor;
			}
			bestdist = dist;
		}
	}

	return bestcolor;
}