// Global scripts that are useful for everyone.

#library "tools"
#include "zcommon.acs"// [Russ] Always include this before 8bdmlib
#include "8bdmlib.acs"// included with MM8BDM under acs_source.
					  // See 8bdmlib.acs for details

script "core_toolsopen" OPEN
{
Delay(1);
ServerMAX = GetMaxPlayers();
IsTeamGame = ACS_ExecuteWithResult(975, 1);
}

// [Mike] Return the current game mode. Used for checking if certain items should be available in these modes.
// 0 = Deathmatch
// 1 = Poessesion
// 2 = LMS
// 3 = Duel
// 4 = CTF/team game
script 975 (int checkmode)
{
Switch(CheckMode)
	{
	Case 0:
	if(GetCvar("deathmatch")==1){SetResultValue(0);}
	if(GetCvar("possession")==1){SetResultValue(1);}
	if(GetCvar("teampossession")==1){SetResultValue(1);}
	if(GetCvar("lastmanstanding")==1){SetResultValue(2);}
	if(GetCvar("teamlms")==1){SetResultValue(2);}
	if(GetCvar("duel")==1){SetResultValue(3);}
	if(GetCvar("ctf")==1){SetResultValue(4);}
	if(GetCvar("oneflagctf")==1){SetResultValue(4);}
	if(GetCvar("teamgame")==1){SetResultValue(4);}
	if(GetCvar("terminator")==1){SetResultValue(5);}
	break;
	
	Case 1:
	if(GetCvar("cooperative")==1){SetResultValue(1);}
	if(GetCvar("survival")==1){SetResultValue(1);}
	if(GetCvar("deathmatch")==1){SetResultValue(0);}
	if(GetCvar("possession")==1){SetResultValue(0);}
	if(GetCvar("teampossession")==1){SetResultValue(1);}
	if(GetCvar("lastmanstanding")==1){SetResultValue(0);}
	if(GetCvar("teamlms")==1){SetResultValue(1);}
	if(GetCvar("duel")==1){SetResultValue(0);}
	if(GetCvar("ctf")==1){SetResultValue(1);}
	if(GetCvar("oneflagctf")==1){SetResultValue(1);}
	if(GetCvar("teamgame")==1){SetResultValue(1);}
	if(GetCvar("teamplay")==1){SetResultValue(1);}
	if(GetCvar("terminator")==1){SetResultValue(0);}
	break;
	
	Case 2:
	int ReturnThis = 0;
	if(GetCvar("instagib")==1){ReturnThis=1;}
	if(GetCvar("buckshot")==1){ReturnThis=2;}
	SetResultValue(ReturnThis);
	break;
	}

}

// [Mess] Returns the target of the activator
Script 257 (int UseNumber)
{
SetActivatorToTarget(0);
If(UseNumber == 1){SetResultValue(PlayerNumber());terminate;}
SetResultValue(ActivatorTID());
}

// Radial Push / Pull Script. Force falls off with distance unless Linear is set to > 0. 
// maxforce can be 0 to simply count players in a radius

script 247 (int maxforce, int maxRange, int noFalloff)
{
	if(maxRange == 0){terminate;}

	int targetTID;
	int angle;
	int finalforce;
	int distance;
	int userTID;
	int userTeam = -1;
	int userCount = 0;

	if(ActivatorTID() == 0)
	{
		userTID = ACS_ExecuteWithResult(257, 0);
		userTeam = GetPlayerInfo(userTID - 1000, PLAYERINFO_TEAM);
	}
	else
	{
		userTID = ActivatorTID();
	}

	for(int p = 0;p < ServerMax; p++)
	{
		if(!PlayerInGame(p))
		{
			continue;
		}
		if(isTeamGame)
		{
			if(userTeam == GetPlayerInfo(p, PLAYERINFO_TEAM))
			{
				continue;
			}
		}
		
		targetTID = p+1000;
		if(!CheckActorInventory(targetTID, "NoPushFlag") && xyzDistance(0, targetTID) < maxRange && userTID != targetTID)
		{	
			userCount++;
			distance = xyzDistance(0,targetTID);
			finalforce = ceilOld(FixedMul(maxforce << 16, 1.0 - FixedDiv(distance, maxRange)));
			if(finalforce > maxforce || noFalloff > 0 )
			{
				finalforce = maxforce;
			}
			
			angle = VectorAngle(GetActorX(0) - GetActorX(targetTID), GetActorY(0) - GetActorY(targetTID)) >> 8;
			if(distance>40 || finalforce < 0)
			{
				ThrustThing(angle, finalforce, false, targetTID);
			}
		}
		
	}
	SetResultValue(userCount); // Returns amount of players caught in the pull
}// End script 247

// Actor Property changer. Used for DECORATE (scorch wheel etc)
//
script 191 (int prop, int mult, int div)
{
SetActorProperty(0,prop,((1.0)*mult)/div);
}

// Actor Property Getter. Used for DECORATE
script "core_getactorproperty" (int TID, int prop)
{
SetResultValue(GetActorProperty(TID,prop));
}

// Debugging script. Have actors call this to get all kinds of info on them. Press crouch to stop debugging.
script "core_debug" (int tid, int who, int debugger)
{
	int caller = 1000 + debugger;

	switch(who)
	{
		Case 1:
		SetActivator(tid, AAPTR_TARGET);
		break;
		
		Case 2:
		SetActivator(tid, AAPTR_MASTER);
		break;
		
		Case 3:
		SetActivator(tid, AAPTR_TRACER);
		break;
		
		Case 4:
		SetActivator(tid, AAPTR_PLAYER_GETTARGET);
		break;
		
		Case 5:
		SetActivator(tid, AAPTR_FRIENDPLAYER);
		break;
	}
	
	while(true){
	SetHudSize(800, 600, 0);
	HudMessageBold(n:0, 
	s:"\npos: x: ", f:GetActorX(0), s:" y: ", f:GetActorY(0), s:" z: ", f:GetActorZ(0),
	s:"\nangle: ", f:GetActorAngle(0),
	s:"\ntarget: ", i:ACS_NamedExecuteWithResult("core_gettarget"), 
	s:"\ntracer: ", i:ACS_NamedExecuteWithResult("core_gettracer"),
	s:"\nmaster: ", i:ACS_NamedExecuteWithResult("core_getmaster"),
	s:"\nhealth: ", i:GetActorProperty(0, APROP_HEALTH),
	s:"\nspeed: ", f:ACS_NamedExecuteWithResult("core_getspeed"); HUDMSG_PLAIN, -9999, CR_WHITE, 0.1, 450.1, 2.0);
	
	Delay(1);
	
	if(GetPlayerInput(caller- 1000 + debugger, INPUT_BUTTONS) & BT_CROUCH){break;}
	}
}

// Get moving speed of an actor
script "core_getspeed" (int l)
{
	int x, y, z, speed;
	x = GetActorVelX(0);
    y = GetActorVelY(0);
    z = GetActorVelZ(0);
    speed = FixedMul(x, x) + FixedMul(y, y) + FixedMul(z, z);
	if(l){Log(s:"speed: ", f:speed);}
	SetResultValue(speed);
}

// Return the actor's target
Script "core_gettarget" (int l)
{
	SetActivator(0, AAPTR_TARGET);
	if(l){Log(s:"target id: ", i:ActivatorTID(), s:" - ", n:0);}
	SetResultValue(ActivatorTID());
}

// Return the actor's tracer
Script "core_gettracer" (int l)
{
	SetActivator(0, AAPTR_TRACER);
	if(l){Log(s:"tracer id: ", i:ActivatorTID(), s:" - ", n:0);}
	SetResultValue(ActivatorTID());
}

// Return the actor's tracer
Script "core_getmaster" (int l)
{
	SetActivator(0, AAPTR_MASTER);
	if(l){Log(s:"master id: ", i:ActivatorTID(), s:" - ", n:0);}
	SetResultValue(ActivatorTID());
}

// Check if boss music should be playing on player disconnecting (or spectating)
script "core_disconnectmusic" (int player) DISCONNECT
{
	ACS_NamedExecuteAlways("core_musichandler", 0);
}

//Check if Target is out of commision
script "core_targetexists" (int tracer)//This is for projectiles to check if their owner spectated, disconnected, or is dead.
{
    
    if(tracer==0)
    {    
        if(!SetActivatorToTarget(0))
        {
        SetResultValue(0);
        terminate;
        }
    }
    
    if(tracer==1)
    {
        if(!SetActivator(0, AAPTR_TRACER))
        {
        SetResultValue(0);
        terminate;
        }
    }
    
    if(ClassifyActor(0) & ACTOR_PLAYER && ActivatorTID() == 0)
    {
        SetResultValue(0);
        terminate;
    }
    
    if(ClassifyActor(0) & (ACTOR_DEAD|ACTOR_NONE|ACTOR_WORLD))
    {
        SetResultValue(0);
        terminate;
    }

    SetResultValue(1);
}



// Player freeze stacker
// Set player to 0 for the activator or specify a player number
script "core_freezeplayer" (int player, int toggle)
{
int tid = ActivatorTID();

if(player>0){tid = player + 999;}

	if(toggle >= 1){
		GiveActorInventory(tid, "PlayerPropertyFrozen", 1);
		SetActivator(tid);
		SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
	}
	if(toggle == 0){
		if(CheckActorInventory(tid, "PlayerPropertyFrozen")>0){
		TakeActorInventory(tid, "PlayerPropertyFrozen", 1);
		
			if(CheckActorInventory(tid, "PlayerPropertyFrozen")==0){
			SetActivator(tid);
			SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
			}
		}
	}
}

// Player restrain stacker
// Set player to 0 for the activator or specify a player number
script "core_stopplayer" (int player, int toggle)
{
int tid = ActivatorTID();

if(player>0){tid = player + 999;}

    if(toggle >= 1){
        GiveActorInventory(tid, "PlayerPropertyStopped", 1);
        SetActivator(tid);
        SetPlayerProperty(0, 1, PROP_FROZEN);
    }
    if(toggle == 0){
        if(CheckActorInventory(tid, "PlayerPropertyStopped")>0){
        TakeActorInventory(tid, "PlayerPropertyStopped", 1);
        
            if(CheckActorInventory(tid, "PlayerPropertyStopped")==0){
            SetActivator(tid);
            SetPlayerProperty(0, 0, PROP_FROZEN);
            }
        }
    }
}

// Player Flight stacker
// Set player to 0 for the activator or specify a player number
script "core_flyplayer" (int player, int toggle)
{
int tid = ActivatorTID();

if(player>0){tid = player + 999;}

	//PrintBold(i:tid);
	if(toggle >= 1){
		GiveActorInventory(tid, "PlayerPropertyFlight", 1);
		//SetActivator(tid);
		GiveActorInventory(tid, "PlayerPropertyFlightOn",1);
		if(toggle !=2){
		Thing_Stop(tid);
		}
	}
	if(toggle == 0){
		if(CheckActorInventory(tid, "PlayerPropertyFlight")>0){
		TakeActorInventory(tid, "PlayerPropertyFlight", 1);
		
			if(CheckActorInventory(tid, "PlayerPropertyFlight")==0){
			//SetActivator(tid);
			GiveActorInventory(tid, "PlayerPropertyFlightOff",1);//SetPlayerProperty(0, 0, PROP_FLIGHT);
			}
			
		}
	}

}

// Player CANTSEEK stacker
// Set player to 0 for the activator or specify a player number
script "core_cantseekplayer" (int player, int toggle)
{
int tid = ActivatorTID();

if(player>0){tid = player + 999;}

	if(toggle >= 1){
		GiveActorInventory(tid, "PlayerPropertyCantseek", 1);
		SetActivator(tid);
		GiveInventory("PlayerPropertyCantseekOn", 1);
	}
	if(toggle == 0){
		if(CheckActorInventory(tid, "PlayerPropertyCantseek")>0)
		{
			TakeActorInventory(tid, "PlayerPropertyCantseek", 1);
		
			if(CheckActorInventory(tid, "PlayerPropertyCantseek")==0)
			{
				SetActivator(tid);
				GiveInventory("PlayerPropertyCantseekOff", 1);
			}
		}
	}
}


// Gets a player's team
script "core_getplayerteam" (int player)
{
	if(player == -1){player = PlayerNumber();}
	SetResultValue(GetPlayerInfo(player, PLAYERINFO_TEAM));
}

// Used for trailer recording. Press use to stop
script "core_moveme" (int velx, int vely, int velz)
{
	while(!(GetPlayerInput(PlayerNumber(), INPUT_BUTTONS) & BT_USE)){
	SetActorVelocity(0, velx<<16, vely<<16, velz<<16, 0, 0);
	Delay(1);
	}
}

// [Mess] Returns 1 if a player is within Distance
Script 261 (int Distance)
{
int ReturnThis=0;
For(int i = 0; i < ServerMax; i++)
	{
	If(PlayerInGame(i) && i != PlayerNumber())
		{
		If(xyzdistance(ActivatorTID(), i+1000) < Distance){ReturnThis=1;break;}
		}
	}
SetResultValue(ReturnThis);
}

script "core_lookatptr" (int ptr) {
	int tid = ACS_NamedExecuteWithResult("core_getptrtid", ptr);
	if(tid != 0) {
		ActorFace(0, tid);
		ActorLookAt(0, tid, 32.0, 0);
	}
}

script "core_getptrtid" (int ptr) {
	SetActivator(0, ptr);
	setResultValue(ActivatorTID());
}

script "core_compareptr" (int ptr1, int ptr2) {
	setResultValue(IsPointerEqual(ptr1, ptr2) && !IsPointerEqual(ptr1, AAPTR_NULL) && !IsPointerEqual(ptr2, AAPTR_NULL));
}

script "core_setpointer" (int assign_slot, int tid, int pointer_selector)
{
SetPointer(assign_slot, tid, pointer_selector);
}

script "core_checkclientcvar" (int which) CLIENTSIDE
{
	int cln = ConsolePlayerNumber();
	switch(which) {
		default:
			setResultValue(-1);
			break;
		case 1: // mm8bdm_enablegibs
			setResultValue(GetUserCvar(cln,"mm8bdm_enablegibs"));
			break;
	}
}

// [Mess] Script to determine pitch or Angle of player on a projectile

Script 259 (int PitchAngle)
{
int TargetPlayer=ACS_ExecuteWithResult(257);
int PlayerPitch = GetActorPitch(TargetPlayer);
int PlayerAngle = GetActorAngle(TargetPlayer);

Switch(PitchAngle)
	{
	Case 0:
	SetActorPitch(0, PlayerPitch);
	break;
	Case 1:
	SetActorPitch(0, PlayerPitch);
	SetActorAngle(0, PlayerAngle);
	break;
	Case 2:
	SetActorAngle(0, PlayerAngle);
	break;
	}
}

//[Mess]
//Mode = 0
//Returns state of the boss music.  
//0 = Standard Music
//1 = Boss Music playing
//2 = Victory Music playing and round over

//Mode = 1 
//Sets BossMusic to value of Arg 2
//Set to > 2 to disable boss music script

//Mode = 2
//Sets BossMusic to value of Arg 2
//Set to > 2 to disable boss music script
//Plays Music in addition to setting.

Script 972 (int Mode, int MusicToValue)
{
int bossState = getBossMusicState();
Switch(Mode)
	{
	Case 0:
	SetResultValue(bossState);
	break;
	Case 1:
	setBossMusicState(MusicToValue);
	break;
	Case 2:
	setBossMusicState(MusicToValue);
	If(bossState == 0){SetMusic("*");}
	If(bossState == 1){BossMusicSelect(GetLevelInfo(LEVELINFO_PAR_TIME), 0);}
	If(bossState == 2){BossMusicSelect(GetLevelInfo(LEVELINFO_PAR_TIME), 1);}
	If(bossState == 3){BossMusicSelect(GetLevelInfo(LEVELINFO_PAR_TIME), 2);}
	break;
	}
}

// Sticky script for moving platforms
int onPlat[64];

script "core_stickyLifts" (int mode)
{
	int x, y, z, oldX, oldY, oldZ, velX, velY, velZ;
	int playerX, playerY, playerZ;
	int pVelX, pVelY, pVelZ;
	int height = GetActorProperty(0, APROP_Height) >> 16;
	int radius = GetActorProperty(0, APROP_Radius) >> 16;

	SetInventory("CutterFlag", 1);
	oldX = GetActorX(0);
	oldY = GetActorY(0);
	oldZ = GetActorZ(0);
	
	if(mode == STICKYMODE_GUTSLIFT)
	{
		while (CheckInventory("CutterFlag"))
		{
			delay(1);
			x = GetActorX(0);
			y = GetActorY(0);
			z = GetActorZ(0);
			velX = GetActorVelX(0);
			velY = GetActorVelY(0);
			velZ = GetActorVelZ(0);

			for(int i = 0; i < ServerMAX; i++)
			{
				If(!PlayerInGame(i)) { continue; }
				playerZ = GetActorZ(1000+i);
				if(onPlatformZ(z,playerZ,height)) 
				{
					playerX = GetActorX(1000+i);
					playerY = GetActorY(1000+i);
					if (onPlatformXY(x,y,playerX,playerY,radius*2))
					{
						Warp(1000+i,
							playerX + (x-oldx),
							playerY + (y-oldy),
							playerZ + (z-oldz),
							0, WARPF_MOVEPTR|WARPF_ABSOLUTEPOSITION|WARPF_USECALLERANGLE);
						SetUserArray(0, "user_playerRiding", i, true);
					}
				}
				else
				{
					if(GetUserArray(0, "user_playerRiding", i))
					{
						pVelX = GetActorVelX(i+1000);
						pVelY = GetActorVelY(i+1000);
						pVelZ = GetActorVelZ(i+1000);
						SetActorVelocity(i+1000, velX+pVelX, velY+pVelY, velZ+pVelZ, 0, 0);
						SetUserArray(0, "user_playerRiding", i, false);
					}
				}
			}
			oldx = x;
			oldy = y;
			oldz = z;
		}
		
		for(i = 0; i < ServerMAX; i++)
		{
			if(GetUserArray(0, "user_playerRiding", i))
			{
				pVelX = GetActorVelX(i+1000);
				pVelY = GetActorVelY(i+1000);
				pVelZ = GetActorVelZ(i+1000);
				SetActorVelocity(i+1000, velX+pVelX, velY+pVelY, velZ+pVelZ, 0, 0);
				SetUserArray(0, "user_playerRiding", i, false);
			}
		}
	} // END STICKY MODE GUTSLIFT
	
	if(mode == STICKYMODE_MAGFLY)
	{
		while (CheckInventory("CutterFlag"))
		{
			x = GetActorX(0);
			y = GetActorY(0);
			z = GetActorZ(0);
			for(i=0; i<ServerMAX; i++)
			{
				If(PlayerInGame(i))
				{
					playerX = GetActorX(1000+i);
					playerY = GetActorY(1000+i);
					playerZ = GetActorZ(1000+i);
					if (onPlatformXY(x,y,playerX,playerY,radius+radius/2))
					{
						If(GetActorZ(i+1000) - GetActorFloorZ(i+1000) != 0)
						{
							Warp(1000+i,
								playerX + (x-oldx),
								playerY + (y-oldy),
								playerZ,
								0, WARPF_MOVEPTR|WARPF_ABSOLUTEPOSITION|WARPF_USECALLERANGLE);
						}
						Else
						{
							Warp(1000+i, x, y, PlayerZ, 0, WARPF_MOVEPTR|WARPF_ABSOLUTEPOSITION|WARPF_USECALLERANGLE);
						}
						
						If(z - 72.0 > PlayerZ)
						{
							ThrustThingZ(i+1000, 48, 0, 0);
						}
						If(z - 72.0 <= PlayerZ)
						{
							ThrustThingZ(i+1000, 0, 0, 0);
						}
					}
				}
			}
			oldx = x;
			oldy = y;
			oldz = z;
			delay(1);
		}
	} // END OF STICKY MODE MAGFLY
}

// Health checker for hit-based shields.
// hits - the number of hits the shield can tank for the player
// customProtect (true or false) - whether the shield uses the generic protection or its own
script 982 (int hits, int customProtect)
{
	if(hits == 0)
	{
		hits = 1;
	}
	else if(hits > 999)
	{
		//Log(s:"\cgSCRIPT 982: SPECIFIED HITS VALUE TOO HIGH. TERMINATING.");
		terminate;
	}
	
	int health = GetActorProperty(0, APROP_HEALTH);
	int maxHealth = GetActorProperty(0, APROP_SPAWNHEALTH);
	int healCurrent = health;
	bool loanHP = false;
	
	if(maxHealth == 0)
	{
		maxHealth = 100;
	}
	
	TakeInventory("ShieldHits", 999);
	GiveInventory("ShieldHits", hits);
	
	SetPlayerProperty(0, 1, PROP_BUDDHA);
	
	if(health < 2)
	{
		healCurrent = 2;
		loanHP = true;
		SetActorProperty(0, APROP_HEALTH, 2);
	}
	
	while(CheckInventory("ShieldHits")>0 && CheckInventory("StopHitShield")==0)
	{
		Delay(1);
		if(GetActorProperty(0, APROP_HEALTH) > health)
		{
			health = GetActorProperty(0, APROP_HEALTH);
			healCurrent = GetActorProperty(0, APROP_HEALTH);
		}
		
		if(healCurrent > GetActorProperty(0, APROP_HEALTH))
		{
			TakeInventory("ShieldHits", 1);
			
			if(CheckInventory("ShieldHits")>0)
			{
				SetActorProperty(0, APROP_HEALTH, healCurrent);
			}
			else
			{
				SetActorProperty(0, APROP_HEALTH, health);
			}
			
			if(!customProtect)
			{
				GiveInventory("HitShieldProtection", 1);
			}
		}
	}
	
	if(loanHP && GetActorProperty(0, APROP_HEALTH) < maxHealth)
	{
		SetActorProperty(0, APROP_HEALTH, GetActorProperty(0, APROP_HEALTH)-1);
	}
	
	if(CheckInventory("ShieldCheck")==0 && CheckInventory("BasicArmor")==0 && !customProtect)
	{
		GiveInventory("HitShieldProtection", 1);
	}
	
	SetPlayerProperty(0, 0, PROP_BUDDHA);
}

// Return a player's current weapon
Script "core_getplayerweapon" (int playerno)
{
	SetActivator(playerno + 1000);
	SetResultValue(GetWeapon());
}

// This spawns a trail of sprites from the calling projectile to the given player TID
Script "core_drawhookshot" (int playerTid, int density) CLIENTSIDE
{
    int plX; int plY;  int plZ;
    int grX; int grY;  int grZ;
    int vX;  int vY;   int vZ;
    int nX;  int nY;   int nZ;
    int bX;  int bY;   int bZ;
    int magnitude;
    int pointCount;
    int pointOffset;
	
	while(ClassifyActor(0) && GetActorProperty(playerTid, APROP_HEALTH)>0){

    plX = GetActorX(playerTid); grX = GetActorX(0);
    plY = GetActorY(playerTid); grY  = GetActorY(0);
    plZ = GetActorZ(playerTid)+(28 << 16); grZ  = GetActorZ(0);
//+28 to the spawn height of the ^player so the chain doesn't spawn from their feet.
    vX = grX - plX;   vY = grY - plY;   vZ = grZ - plZ;

    magnitude = magnitudeThree(vX >> 16, vY >> 16, vZ >> 16);

    pointCount  = magnitude / density;
    pointOffset = magnitude - (pointCount * density);

	str SpawnName = StrParam(s:GetActorClass(0), s:"FX");
	
	if(grX == 0 && grY == 0 && grZ == 0){terminate;} 

    if (magnitude != 0)
    {
        nX = vX / magnitude; nY = vY / magnitude; nZ = vZ / magnitude;

        int i; int j;
        for (i = 0; i < pointCount; i++)
        {
            j = (i * density) + pointOffset;

            bX = (nX * j) + plX;
            bY = (nY * j) + plY;
            bZ = (nZ * j) + plZ;// +(16 << 16);

			if(i>0){
			Spawn(SpawnName, bX, bY, bZ);
			}
		
        }
    }				
	Delay(1);
			
	}
}

script "cbm_CheckForRealMovementInput" (void)
{
	int Is_Moving = 1;
	int Move = checkForMovement(GetPlayerInput(-1, INPUT_BUTTONS));
	if(Move == 1 || Move == 7 || Move == 25 || Move == 31){
		Is_Moving = -1;
	}
	SetResultValue(Is_Moving);
}

script 850 (void)
{
//SetResultValue(checkForJump(GetPlayerInput(-1, INPUT_BUTTONS)));
SetResultValue(checkForMovement(GetPlayerInput(-1, INPUT_BUTTONS)));
}

function bool checkForMovement(int buttons) {
	int result = 1;

	if (buttons & BT_MOVERIGHT){
		result+=2;
	}
	if (buttons & BT_MOVELEFT){
		result+=4;
	}
	if (buttons & BT_BACK){
		result+=8;
	}
	if (buttons & BT_FORWARD){
		result+=16;
	}

	return(result);
}