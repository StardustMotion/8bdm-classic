#DEFINE DB_FIELD_HERO 		"hero_"
#DEFINE DB_FIELD_WEAPONS 	"weapons_"
#DEFINE DB_FIELD_EXP 		"exp_"

#DEFINE DB_CREATE_HERO 0
#DEFINE DB_DELETE_HERO 1
#DEFINE DB_ACCOUNT_LOAD 2
#DEFINE DB_SAVE_ACT_PROGRESS 3
function void dbEvent(int type, int arg1, int arg2, int arg3) {
	BeginDBTransaction();
    switch(type) {
        /*
        @arg1 player
        @arg2 slot
        @arg3 heroIndex
        */
        case DB_CREATE_HERO:
            setPlayerHero(arg1, arg2, arg3);
            clearWeps(arg1, arg2);
            setExp(arg1, arg2, 0);
            if ((arg2 >= 0) && PlayerIsLoggedIn(arg1)) {
                str login = GetPlayerAccountName(arg1);
                updateDB(login, strParam(s:DB_FIELD_HERO, d:arg2), arg3+1);
                updateDB(login, strParam(s:DB_FIELD_WEAPONS, d:arg2), 0);
                updateDB(login, strParam(s:DB_FIELD_EXP, d:arg2), 0);
            }
        break;
        
        /*
        @arg1 player
        @arg2 slot. If == MAX_SLOTS, delete from all slots instead
        */
        case DB_DELETE_HERO:
            if (arg2==MAX_SLOTS) { type = -1; arg3 = MAX_SLOTS; }
            else { type = arg2; arg3 = arg2+1; }

            if (PlayerIsLoggedIn(arg1)) login = GetPlayerAccountName(arg1);
            else                        login="";

            for (arg2=type; arg2 < arg3; arg2++) {
                setPlayerHero(arg1, arg2, -1);
                if ((arg2>=0) && strLen(login))
                    updateDB(login, strParam(s:DB_FIELD_HERO, d:arg2), 0);

            }
        break;
        
        /*
        @arg1 player
        */
        case DB_ACCOUNT_LOAD:
            if (!PlayerIsLoggedIn(arg1)) return;
            login = GetPlayerAccountName(arg1);
            for (int i = 0; i < MAX_SLOTS; i++) {
                setPlayerHero(arg1, i, selectDB(login,strParam(s:DB_FIELD_HERO, d:i))-1);
                setExp(arg1, i, selectDB(login,strParam(s:DB_FIELD_EXP, d:i)));
            }
        break;

        /* no args */
        case DB_SAVE_ACT_PROGRESS:
            for (i = 0; i < MAX_C8_PLAYERS; i++)
                if (isSelectedPlayer(i)) {
                    SetActivatorToPlayer(i);
                    int slot = getAllowedSlot(i);
                    arg2 = min(getExp(i,slot)+getExpPool(i),MAX_RANK*1000);
                    setExp(i,slot,arg2);
                    setExpPool(i,0);
			        updateRank(getRank(i,slot), false);
                    if (PlayerIsLoggedIn(i))
                        updateDB(GetPlayerAccountName(i), strParam(s:DB_FIELD_EXP, d:i), arg2);
                }
        break;
    }
	
    EndDBTransaction();
}

function void updateDB(str login, str field, int value) {
    Log(s:">>> \ck[UPDATE] ", s:login, s:"\cc--> \ci", s:field, s:" \ccto \ci", d:value);
    SetDBEntry(login,field,value);
}
function int selectDB(str login, str field) {
    int data = GetDBEntry(login,field);
    Log(s:">>> \ck[SELECT] ", s:login, s:"\cc--> \ci", s:field, s:" \cc: \ci", d:data);
    return data;
}