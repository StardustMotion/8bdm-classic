    //////////////////////////////////////////////////////////
//                           Misc/utils            				//
	//////////////////////////////////////////////////////////

function int ceilf(int n) { return ((n-1) & 0xFFFF0000) + 1.0; }
function int floorf(int n) { return n&0xFFFF0000; }
function int roundf(int n) { return (n+0.5)&0xFFFF0000; }
    
function int getBit(int x, int b) { return (x & (1 << b))>>b; }
function int bitOn(int x, int b) { return x | (1 << b); }
function int bitOff(int x, int b) { return x & ~(1 << b); }

// 32 values of [1 bit]
function int getBoolFlagVal(str cvar, int var)                          { return getBit(GetCvar(__boolFlagVal(cvar,var)), var&0x1F); }
function void setBoolFlagVal(str cvar, int var, int val)                {
    cvar = __boolFlagVal(cvar,var);
    log(s:"modif ", s:cvar);
    SetCVar(cvar, val ? bitOn(GetCvar(cvar), var&0x1F) : bitOff(GetCvar(cvar), var&0x1F));
}
function str __boolFlagVal(str cvar, int var) {                           return strParam(s:cvar, d:var>>5); }

// 16 values of [2 bits]
function int get2bFlagVal(str cvar, bool incrCvar,  int var) 			{ return __getNbitFlagVal(cvar, incrCvar, var, 0xF, 4, 0xFFFF); }
function void set2bFlagVal(str cvar, bool incrCvar, int var, int val)   { __setNbitFlagVal(cvar, incrCvar, var, 0xF, 4, 0xFFFF, val); }

// 8 values of [4 bits]
function int get4bFlagVal(str cvar, bool incrCvar, int var) 			{ return __getNbitFlagVal(cvar, incrCvar, var, 0x7, 3, 0xFF); }
function void set4bFlagVal(str cvar, bool incrCvar, int var, int val) 	{ __setNbitFlagVal(cvar, incrCvar, var, 0x7, 3, 0xFF, val); }

// 4 values of [8 bits]
function int get8bFlagVal(str cvar, bool incrCvar, int var) 			{ return __getNbitFlagVal(cvar, incrCvar, var, 0x3, 2, 0xF); } 
function void set8bFlagVal(str cvar, bool incrCvar, int var, int val) 	{ __setNbitFlagVal(cvar, incrCvar, var, 0x3, 2, 0xF, val); }

// 2 values of [16 bits]
function int get16bFlagVal(str cvar, bool incrCvar, int var) 			{ return __getNbitFlagVal(cvar, incrCvar, var, 0x1, 1, 0x7); }
function void set16bFlagVal(str cvar, bool incrCvar, int var, int val) 	{ __setNbitFlagVal(cvar, incrCvar, var, 0x1, 1, 0x7, val); }


function int __getNbitFlagVal(str cvar, bool incrCvar, int var, int n, int log2n, int mask) {
	n = (var&n)<<log2n;
	return ((GetCvar(incrCvar ? strParam(s:cvar, d:var>>log2n) : cvar) & (mask<<n))>>n)&mask; // é -è'  o w  o ?
}

function void __setNbitFlagVal(str cvar, bool incrCvar, int var, int n, int log2n, int mask, int val) {
	if (incrCvar)
		cvar = strParam(s:cvar, d:var>>log2n);    
	n = (var&n)<<log2n;
	SetCVar(cvar,  (GetCvar(cvar) & ~(mask<<n)) | (val<<n));		
}

function int valueOr(int object, int or) {
	if (object) return object;
	return or;
}

// the str returned by GetCvarString can cause issues when the Cvar requested doesn't exist
function str strSanitize(str string) {
	return valueOr(string,"");
}

function void clearInv(str item) { 
	TakeInventory(item,INT_MAX);
}

// general HUD draw wrapper / to call from clientside
function void draw(str data, int id, bool isText, int x, int y, int xScreen, int yScreen, int time, int alpha) {
	SetHudSize(xScreen,yScreen,true); 	
	if (isText) {
		SetFont("CONFONT");
		int val = data;
	}
	else {
		SetFont(data); 
        val="A";
	}
	HudMessageBold(s:val;((alpha>>24) ? HUDMSG_TYPEON : HUDMSG_PLAIN)|HUDMSG_ALPHA ,id,CR_UNTRANSLATED,x,y,time,alpha&0x1FFFF,0.0);
}

// basic version
function void drawBI(str image, int id, int x, int y, int xScreen, int yScreen) { 
    draw(image, valueOr(id,Get_And_Inc_AssistDisplayID()), false, 
        x, y, valueOr(xScreen,DEFAULT_HUD_X), valueOr(yScreen,DEFAULT_HUD_Y), (id ? 32000.0 : 0.04), 1.0); }
function void drawBT(str text, int id, int x, int y, int xScreen, int yScreen) { 
    draw(text, valueOr(id,Get_And_Inc_AssistDisplayID()), true, 
        x, y, valueOr(xScreen,DEFAULT_HUD_X), valueOr(yScreen,DEFAULT_HUD_Y), (id ? 32000.0 : 0.04), 1.0); }
    
function void drawTypedT(str text, int id, int x, int y, int xScreen, int yScreen, int typeTime) {  
    draw(text, id, true, 
        x, y, valueOr(xScreen,DEFAULT_HUD_X), valueOr(yScreen,DEFAULT_HUD_Y), 32000.0, typeTime|0x1000000); }


function void erase(int id) { HudMessageBold(s:"";0,id,0,0,0,0); }
function void eraseAll(int start, int size) {
    for (int i = start; i < start+size; i++) erase(i);
}

/*
@unit size of each generated part increment, in pixel
@barSize graphic size in pixel when it is fully filled
@fillRatio [0,1.0]

maybe generalize to "draw mask" later
*/
#DEFINE C8_BAR_X 240.0
#DEFINE C8_BAR_Y 190.0
#DEFINE C8_VAR_X 250.0
#DEFINE C8_VAR_Y 180.0

function void draw8cBar(str graphic, bool isHorizontal, int unit, int barSize, int fillRatio, int x, int y, int xScreen, int yScreen) {
    if (fillRatio>1.0) fillRatio = 1.0;
    else if (fillRatio<0) fillRatio = 0;
    int n = ((ceilf((1.0-fillRatio)*(barSize/unit)))>>16); // 28
    int base = n;
    unit<<=16;
    if (isHorizontal) {
        x = (x&0xFFFF0000) | 0.1;
        int end = x+(barSize<<16)+0.1;
        while (n>>4) {  drawBI("8CBARMK2", 0, end-(unit*(base-n)), y, xScreen, yScreen); n-=16; }
        while (n>>2) {  drawBI("8CBARMK1", 0, end-(unit*(base-n)), y, xScreen, yScreen); n-=4;  }
        while (n)    {  drawBI("8CBARMK0", 0, end-(unit*(base-n)), y, xScreen, yScreen); n--;   }
        drawBI(graphic, 0, x, y, xScreen, yScreen);
    }
    else {
        y = (y&0xFFFF0000) | 0.2;
        end = y-(barSize<<16)-0.1;
        while (n>>4) {  drawBI("8CVARMK2", 0, x, end+(unit*(base-n)), xScreen, yScreen); n-=16; }
        while (n>>2) {  drawBI("8CVARMK1", 0, x, end+(unit*(base-n)), xScreen, yScreen); n-=4;  }
        while (n)    {  drawBI("8CVARMK0", 0, x, end+(unit*(base-n)), xScreen, yScreen); n--;   }
        drawBI(graphic, 0, x, y, xScreen, yScreen);
    }
}

function void draw8cNumber(int number, int id, int x, int y, int xScreen, int yScreen, int font, bool fromRight) {
	switch(font) {
		case SMALL_FONT: int space = 11.0; break;
		case BIG_FONT: space = 14.0; break;
	}
	font = strParam(s:"8CNUMB",d:font);
	int n = 0;
    int digits[8];
	while (true) {
		int digit = number%10;
        digits[n] = digit;
        n++;
        number /= 10;
        if (!number) break;
	}
    x = (x&0xFFFF0000)| (fromRight ? 0.2 : 0.1);
    for (int i = 0; i < n; i++) {
        drawBI(strParam(s:font, d:digits[(fromRight ? i : n-i-1)]), 
            (id? id+i : 0), 
            x + (space* (fromRight ? -i : i)), y, xScreen, yScreen);

    }


}


function int pressedStatus(void) {
    int prev = GetPlayerInput(-1, INPUT_OLDBUTTONS);
    return (GetPlayerInput(-1, INPUT_BUTTONS) ^ prev) & ~prev;
}
function bool isPressed(int status, int key) {
	return (status&key);
}


function str lineBreak(str string, int every) {
    str s = "";
    int length = strLen(string);
    while (length>0) {
        s = strParam(s:s, s:strLeft(string, every), s:"\n");
        length-=every;
        string = strRight(string, length);
    }
    return s;
}

function void sfx(str sound) {
    LocalAmbientSound(sound,127);
}


// from vanilla but /w zOffset param
function bool checkFooting(int zOffset) {
	int tid = UniqueTID();
	bool check = Spawn("8bdmFootholdCheck",GetActorX(0),GetActorY(0),GetActorZ(0)+zOffset,tid);
	Thing_Remove(tid);
	return check;
}

function bool isGone(int ptr) {
	if (ptr) {
		SetActivator(0,ptr);
		ptr = 0;
	} 
	int flags = ClassifyActor(ptr);
	return (flags & (ACTOR_WORLD | ACTOR_DEAD)) || ((flags & ACTOR_PLAYER) && PlayerIsSpectator(PlayerNumber()));
}




	//////////////////////////////////////////////////////////
//                           debug/playground/temporary code   //
	//////////////////////////////////////////////////////////


// /* ALIGNER
// x
// .0 = positions center of box
// .1 = positions left edge of box
// .2 = positions right edge of box
// .4 = centers text inside box and aligns center
// .5 = centers text and aligns left edge
// .6 = centers text and aligns right edge
// For y:

// .0 = positions center of box
// .1 = positions top edge of box
// .2 = positions bottom edge of box*/





/*
    type in console
	pukename hude
	to test this tool. To change the graphic being displayed, type the graphics' name in chat

- Movement key						change position/scale (hold fire to speed up)
- Reload							toggle position/scale mode
- Show scoreboard 					toggle "keep graphic proportions"
- Altfire							stamp the image (can stamp up to 64 images on screen)
- Altfire (while holding Fire)		delete the last stamped image
- Reload (while holding Fire)		show all current's stamps' coordinates			
*/

str hude_graphic = "CHINTR2";
script "hude" (void) CLIENTSIDE {
	int x = 0, y = 0, sizeX = 320, sizeY = 200;
	str stamps[64]; int maxStamp = 64; str coords;
    int inp, oldB, incr, id = 0;
    bool mode, delta, prevDelta, speedUp, proportional = 1;
    int decimals, grace = 0;
    int ratio = 1.6;
	SetPlayerProperty(0,1,PROP_TOTALLYFROZEN );
    do {
        inp = GetPlayerInput(-1, INPUT_BUTTONS);
		oldB = GetPlayerInput(-1, INPUT_OLDBUTTONS);
		
		if (!(oldB&(BT_ATTACK) && oldB&(BT_RELOAD)) && (inp&(BT_ATTACK) && inp&(BT_RELOAD))) {
			for (int i = 0; i < id; i++)
				log(s:stamps[i]);
			LocalAmbientSound("misc/trainwhistle", 127);
		}
        else if ((!(oldb&BT_RELOAD) && (inp&BT_RELOAD)) && !(inp&BT_ATTACK)) {
            mode = !mode;
            LocalAmbientSound("misc/10w3elvs",127); 
            log(s:"Mode : ", s:mode ? "\cnscale" : "\caposition");
        }

		else if (!(oldB&(BT_ATTACK) && oldB&(BT_ALTATTACK)) && (inp&(BT_ATTACK) && inp&(BT_ALTATTACK))) {
			if (id) {
				stamps[id] = "";
        		HudMessageBold(s:""; HUDMSG_PLAIN , maxStamp-id,CR_UNTRANSLATED, x, y, 0, 1.0);
				id--;
				LocalAmbientSound("item/rushdetect", 127); 				
			}
		}
		else if (!(oldB&(BT_ALTATTACK)) && (inp&(BT_ALTATTACK))) {
			if (id == maxStamp-1) {
				Log(s:"\cgCan't stamp!! ", d:maxStamp, s:" limit reached");
				LocalAmbientSound("misc/boing", 127);
			}
			else {
				stamps[id] = strParam(s:"--- \ccStamped ", s:coords);
				id++;
				LocalAmbientSound("misc/mercuryconveyorswitch", 127);
			}
		}
        if (!(oldb&BT_SHOWSCORES) && (inp&BT_SHOWSCORES)) {
            proportional = !proportional;
            if (proportional)
                ratio = FixedDiv(sizeX<<16, sizeY<<16);
			LocalAmbientSound("misc/sheepblockreturn", 127);
            log(s:"Keep proportions : ", s:proportional ? "\cdyes" : "\cqNO");
        }
        speedUp = inp&BT_ATTACK;
        if (!mode) incr = 1.0 * (speedUp ? 6 : 1);
        else       incr = 1 * (speedUp ? 8 : 1);
        delta = 0;
        if(!mode && !grace) {
            if  (inp&BT_MOVELEFT)   { x-=incr; delta = true; }
            if  (inp&BT_MOVERIGHT)  { x+=incr; delta = true; }
            if  (inp&BT_FORWARD)    { y-=incr; delta = true; }
            if  (inp&BT_BACK)       { y+=incr; delta = true; }
        }
        else if(!grace) {
            if (!proportional) {
                if  (inp&BT_MOVELEFT)   { sizeX+=incr; delta = true; }
                if  (inp&BT_MOVERIGHT)  { sizeX-=incr; delta = true; }
                if  (inp&BT_FORWARD)    { sizeY+=incr; delta = true; }
                if  (inp&BT_BACK)       { sizeY-=incr; delta = true; }
            }
            else {
                if (inp&(BT_MOVERIGHT|BT_BACK)) incr *= -1;
                else if (!(inp&(BT_MOVELEFT|BT_FORWARD))) incr = 0;
                if (incr) {
                    int plusX = ratio*incr;
                    decimals += plusX&0xFFFF;
                    if(decimals>>16) {
                        plusX += (decimals&0xFFFF0000); decimals &= 0xFFFF;
                    }
                    plusX>>=16;
                    sizeX += plusX; 
					sizeY += incr; 
					delta = true;
                }
            }
        }
        coords = strParam(s:"\c->>> [ \cc", s:hude_graphic, s:"\c- ] \cax = ", f:X, s:" \ciy = ", f:Y, s:"   \ckSizeX = ", d:sizeX, s:" \cdSizeY = ", d:sizeY);
		if (grace) grace--;
		else if (delta) {
            log(s:coords);
			if (!prevDelta) {
				prevDelta = true;
				grace = 4;
			}
		}		
		else prevDelta = false;
        delay(1);
		SetHudSize(sizeX,sizeY,true);
		SetFont(hude_graphic);
        HudMessageBold(s:"A"; HUDMSG_PLAIN , maxStamp-id,CR_UNTRANSLATED, x, y, 0, 1.0);			
    } while (true);
}

script "hude_chat" (int type, int arg1, int arg2) EVENT {
	if (type==GAMEEVENT_CHAT)
		hude_graphic = GetChatMessage(arg1,0);
}


// script "sum" (int id, int minplayer) {
// 	str name = getName(id+MAX_HERO);
// 	int tid = activatorTID();
// 	if (minplayer) spawn8cMin(name,tid,minplayer);
// 	else spawn8c(name,tid);
// }