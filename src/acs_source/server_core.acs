


#DEFINE INCARNATION_PREINTRO_TIME 25 // before intro8C state, while "ready" displays
#DEFINE INCARNATION_INTRO_SPAWN_TIME 90 // tics allowed for intro8C duration
#DEFINE INCARNATION_INTRO_TIME INCARNATION_PREINTRO_TIME+INCARNATION_INTRO_SPAWN_TIME
#DEFINE INCARNATION_INTRO_READY_TIME INCARNATION_PREINTRO_TIME+25 // "ready" animation extension display time

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Core scripts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

script "8C" (int type, int arg1, int arg2, int arg3) {
	switch(type) {

		case PHYSICS_8C:
			GiveInventory("8C Static Move Giver", 1);
			SetAirControl(8.392333); // 5.905 for airspeed = groundspeed
			
			/*
			while (true) { // airFriction control }}
			Player air movement was planned to have lower friction + slower player speed,
				resulting in jumps being hard to readjust direction, but gaining more momentum/speed (like doom jumps.)
			This, as a contract to ground movement - high friction + high player speed, resulting in good dodging/position,
			but not good to cover distances.

			It was dropped because modifying player's speed based on grounded/in air (with setactorproperty or powerspeed i.e)
			couldn't use client-side prediction (https://zdoom.org/wiki/Creating_multiplayer-friendly_ZScript)
			to make player movement online smooth.

			Need Player.Forward/Side move properties but for in-air specific :D

			-----------------------------------------------------------------------------------------------

			Also for some reason when an actor (the player) is standing on a solid actor (i.e yoku block),
			the aircontrol (friction) stops applying, giving player a surge of speed
			We reposition the player 1 unit above the solid actor, with no gravity, just so aircontrol applies again (code below)
				
			Limitations though : there's still 1 tic of speed surge (when landing on the actor),
			also jump reproduction not accurate ; it allows jumping again as soon as you land on the actor
			*/
			while(!isGone(NULL)) {
				if ((GetActorZ(0)-GetActorFloorZ(0))>=1.0)
					if (!checkFooting(true,-1.0)) {
						SetActorVelocity(0,GetActorVelX(0),GetActorVelY(0),0.0,false,false);
						SetActorPosition(0,GetActorX(0),GetActorY(0),GetActorZ(0)+1.0,false);
						GiveInventory("8C On actor gravity Giver", 1);
						do {
							delay(1);
							if (isGone(NULL)) 
								terminate;
							if (GetPlayerInput(-1,INPUT_BUTTONS)&BT_JUMP) {
								SetActorVelocity(0,GetActorVelX(0),GetActorVelY(0),GetActorProperty(0,APROP_JumpZ),false,false);
								break;
							}
						}  while (!checkFooting(true,-2.0));
						TakeInventory("8C On actor gravity", 1);
						continue;
					}
				delay(1);
			}
		break;

		case C8_XY_DIST:
			if (!arg1) arg1 = GetActorProperty(0, APROP_TARGETTID);
			SetResultValue(xyDistance(0,arg1));
		break;

		case C8_Z_DIST:
			if (!arg1) arg1 = GetActorProperty(0, APROP_TARGETTID);
			SetResultValue(zDistance(0,arg1));
		break;

		case C8_IS_GONE:
			SetResultValue(isGone(arg1));
		break;
		
		case C8_COPY_VELOCITY:
			GiveInventory("8C follower",1);
			do {
				arg2 = ACS_NamedExecuteWithResult("8C", GET_VELOCITY, arg1);				
				SetActorVelocity(0, 
					((1-((arg2>>23)&0x2))*(arg2&0xFF))<<16, 
					((1-((arg2>>24)&0x2))*(arg2&0xFF00))<<8, 
					(1-((arg2>>25)&0x2))*(arg2&0xFF0000), 
				false, false);
				delay(1);
			} while (CheckInventory("8C follower"));
		break;

		case GET_VELOCITY:
			SetActivator(0, arg1);
			SetResultValue(
				(abs(GetActorVelX(0)>>16)&0xFF) |
				((abs(GetActorVelY(0)>>16)&0xFF) << 8) |
				((abs(GetActorVelZ(0)>>16)&0xFF) << 16) |
				((GetActorVelX(0)<0)<<24) |
				((GetActorVelY(0)<0)<<25) |
				((GetActorVelZ(0)<0)<<26)
			);
		break;

		// detect lateral collision with terrain/actors. Used i.e by Cutting Wheel to climb
		case C8_CHECK_COLLISION:
			arg1 = GetActorAngle(0)+ 0.25*arg1;
			int i = GetActorProperty(0,APROP_Radius)>>16;

			// increase this to help non axis aligned collision detection but at the cost of overall worsened collision accuracy
			arg3 = (i*5)/3;
			
			if (arg2) 	int tmp = "8C Check Collision";
			else 			tmp = "8C Check Terrain";

			arg2 = UniqueTID();
			while (true) {
				type = !Spawn(tmp,
					GetActorX(0) + (arg3 * cos(arg1)) - i*sin(arg1),
					GetActorY(0) + (arg3 * sin(arg1)) + i*cos(arg1),
					GetActorZ(0), arg2);
				if (type) break;
				type = !Spawn(tmp,
					GetActorX(0) + (arg3 * cos(arg1)) + i*sin(arg1),
					GetActorY(0) + (arg3 * sin(arg1)) - i*cos(arg1),
					GetActorZ(0)+GetActorProperty(0,APROP_Height)-12.0, arg2);
				break;
			}
			SetResultValue(type);
			Thing_Remove(arg2);
		break;

		// core_unsolidplayer but more simple, usable for monsters
		case C8_SOLID_TOGGLE:
			if (!arg1) {
				GiveInventory("PlayerPropertyUnsolid", 1);
				GiveInventory("PlayerPropertySolidOff",1);
			}
			else if (CheckInventory("PlayerPropertyUnsolid")) {
				TakeInventory("PlayerPropertyUnsolid", 1);				
				if (!CheckInventory("PlayerPropertyUnsolid"))
					GiveInventory("PlayerPropertySolidOn", 1);
			}
		break;

		/*
		@arg1 which uservar
		@arg2 (optional) pointer
		*/
		case C8_GET_USERVAR:
			if (arg2) SetActivator(0,arg2);
			switch(arg1) {
				case C8_USERVAR_BASECOLOR: arg1 = ENEMY_VAR_BASECOLOR; break;
			}
			SetResultValue(GetUserVariable(0, arg1));
		break;

		// 6b "map_teleportfog" script overwrite
		case NO_8C_FOG:
			if (Timer() < 2) delay(2); // give bootup time to determine isMap8C
			if (isMap8C) terminate;
			// edit end
			arg1 = ACS_NamedExecuteWithResult("core_getptrtid", AAPTR_TARGET);
			arg2 = UniqueTID();
			SpawnForced("TeleportFogFX", GetActorX(0), GetActorY(0), GetActorZ(0), arg2, 0);
			SetActivator(arg2);
			SetPointer(AAPTR_TARGET, arg1);
			SetActivator(arg1);
			Thing_SetTranslation(arg2, -1);
			Thing_ChangeTID(arg2, 0);
		break;

		// From control disable to control enabled again, takes 130 tics
		case INTRO_ANIMATION:
			SetActorProperty(0, APROP_Health, 1);
			ACS_NamedExecuteWithResult("core_freezeplayer", 0, true);
			ACS_NamedExecuteWithResult("core_invulnerableplayer", 0, true);
			ACS_NamedExecuteWithResult("core_invisibleplayer", 0, true);
			ACS_NamedExecuteWithResult("core_nogravityplayer", 0, true);
			GiveInventory("noInteractionOn",1);
			
			arg3 = CAMERA_TID+PlayerNumber();
			arg2 = ActivatorTID();
			SpawnForced("8C Camera",0,0,0,arg3,0);
			SetActivator(arg3);
			SetPointer(AAPTR_TARGET,arg2);
			SetActivator(arg2);
			
		 	ACS_NamedExecuteWithResult("8C CS", CS_INTRO_HUD_ANIMATION, PlayerNumber());
		 	delay(INCARNATION_PREINTRO_TIME);
			ACS_NamedExecuteWithResult("core_invisibleplayer", 0, false);
			ACS_NamedExecuteWithResult("core_nogravityplayer", 0, false);
			GiveInventory("noInteractionOff",1);
			SetActorState(0,"intro8C",true);
			
			// ---- INCARNATION_INTRO_SPAWN TIME start ---- //
			delay(35);
			type = ((GetActorProperty(0,APROP_SpawnHealth)-1)<<16)/40;
			for (i=1; i <= 40; i++) {
				SetActorProperty(0,APROP_Health, 1+((type*i)>>16));
				if (i%2) LocalAmbientSound("8CHPFILL", 127);
				delay(1);
			}
			SetActorProperty(0,APROP_Health, GetActorProperty(0,APROP_SpawnHealth));
			delay(15);
			ACS_NamedExecuteWithResult("core_freezeplayer", 0, false);
			ACS_NamedExecuteWithResult("core_invulnerableplayer", 0, false);
			// ---- INCARNATION_INTRO_SPAWN TIME end ---- //
		break;

		case C8_GOAL_CHECK:
			if ((GetActorProperty(0, APROP_Accuracy)) < getAct()) { // act complete ; pop up the flag
				SetResultValue(true);
				terminate;
			}
			SetResultValue(false);
			arg2 = GetActorProperty(0, APROP_Mass);
			for (i = 0; i < MAX_C8_PLAYERS; i++)
				if (PlayerInGame(i) && isSelectedPlayer(i))
					if ((xyDistance(0,i+1000) < arg2) && !CheckActorInventory(i+1000,"8C Goal Status"))
						GiveActorInventory(i+1000, "8C Enter Goal", 1);
		break;

		/*
		prevents dealing or receiving damage/effects when enabled
		@arg1 on/off
		*/
		case C8_PACIFIST:
			if (arg1) {
				if (!CheckInventory("8C Pacifist Stack"))
					GiveInventory("8C Pacifist Giver",1);
				GiveInventory("8C Pacifist Stack", 1);
			}
			else {
				TakeInventory("8C Pacifist Stack", 1);
				if (!CheckInventory("8C Pacifist Stack"))
					TakeInventory("8C Pacifist",1);
			}
		break;

		case GAME_STATUS_CHECK:
			if (isGameInTransition()) terminate;
			// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
			// 			W             I              N           N             A              B             L          E.
			// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
			arg1 = getMinSurvivors();

			// ACT COMPLETE
			if (getGoal() >= arg1) {
				setGameInTransition(true);
				AmbientSound("8CGOAL", 127);
				setAct(getAct()+1); clearGoal();  setServerPacify(true, true, true);
				delay(10);
				dbEvent(DB_SAVE_ACT_PROGRESS, NULL, NULL, NULL);
				delay(10);
				ACS_NamedExecuteWithResult("8C CS", CS_TRANSITION_MESSAGE, false, true);
				delay(105);
				setmusic(""); ACS_NamedExecuteWithResult("8C CS", CS_CLOSURE_ANIMATION, 60); delay(60);	
				setServerPacify(false, true, false);
				startAct();
				terminate;
			}

			arg2 = countSelectedPlayers(false);

			// ACT FAILED
			if (arg2 < arg1) {
				setGameInTransition(true);
				clearGoal(); setmusic(""); setServerPacify(true, true, true);				
				if (getLives()>1) {
					delay(15);
            		ACS_NamedExecuteWithResult("8C CS",CS_ACT_LOST);
					delay(135);
					setServerPacify(false, true, false);
					setLives(getLives()-1);
					ResetMap();
				}
				// Game OVER
				else {
					delay(45);
					ACS_NamedExecuteWithResult("8C CS", CS_TRANSITION_MESSAGE, true, false);
					delay(85+50);
					setServerPacify(false, true, false);
            		ACS_NamedExecuteWithResult("8C CS", CS_HUD_TRANSITION, CS_HUD_TRANSITION_ALPHA, true);
					terminate;
				}
			}
		break;

		case EARTHQUAKE:
			Radius_Quake(arg1, arg2, 0, arg3/64, 0);
		break;

		/*
		@arg1 the pointer to modify
		@arg2 field to modify
		*/
		case C8_PTR_TO_THIS:
			arg3 = UniqueTID();
			type = ActivatorTID();
			Thing_ChangeTID(0,arg3);
			SetActivator(0,arg1);
			SetPointer(arg2,arg3);
			Thing_ChangeTID(arg3,type);
		break;
	}
}


function void clearGoal(void) {	
	for (int i = 0; i < MAX_C8_PLAYERS; i++) {
		if (PlayerInGame(i)) {
			SetActivatorToPlayer(i);
			if (CheckInventory("8C Goal Status")) {
				ACS_NamedExecuteWithResult("core_freezeplayer", 0, false);
				ACS_NamedExecuteWithResult("8C", C8_PACIFIST, false);
				clearInv("8C Goal Status");
			}}}
}

function void setServerPacify(bool value, bool alterFreeze, bool freezeValue) {
	for (int i = 0; i < MAX_C8_PLAYERS; i++) {
		if (PlayerInGame(i)) {
			SetActivatorToPlayer(i);
				ACS_NamedExecuteWithResult("8C", C8_PACIFIST, value);
				if (alterFreeze)
					ACS_NamedExecuteWithResult("core_freezeplayer", 0, freezeValue);
				
		}
	}
}


script "8C API" (int type, int arg1, int arg2, int arg3) {
	switch(type) {
		/*
		@arg1 map spot TID
		@arg2 radius
		@arg3 goal of arg3 act (1/2)
		*/
		case C8_API_SPAWN_GOAL:
			type = UniqueTID();
			SpawnSpotFacingForced("8C Goal", arg1, type);
			SetActorProperty(type, APROP_ScaleX, arg2<<16);
			SetActorProperty(type, APROP_Accuracy, arg3);
			Thing_ChangeTID(type,0);
		break;
		
		/*
		@arg1 [returnTheTid<<16, enemy CVARINFO ID]
		@arg2 spot tid
		@arg3 either 1 or 3 or 5 or 7, only
		*/
		case C8_API_SPAWN_ENEMY:
			if (!(arg3&0x1) | (arg3>>3)) {
				Log(l:"8C_ENEMY_MINPLAYER", s:"\cc(ID \ca", d:arg1&0xFFFF, s:"\cc, on spot \ca", d:arg2, s:"\cc)");
				arg3 = 0;
			}
			if (arg1&0xFFFF==-1) {
				log(l:"8C_ENEMY_SPAWNER_ID", 
					s:"\cc[X=", f:GetActorX(0), s:", \ccY=", f:GetActorY(0), s:", \ccZ=", f:GetActorZ(0), s:"]");
				terminate;
			}
			SetResultValue(ACS_NamedExecuteWithResult("8C RPG", RPG_SUMMON_ENEMY, arg1, arg2));
		break;
	}
}


function int countSelectedPlayers(bool ignoreStatus) {
	int count = 0;
	for (int i = 0; i < MAX_C8_PLAYERS; i++) {
		if (ignoreStatus) 
			count += isSelectedPlayer(i);
		else
			if (PlayerInGame(i) && isSelectedPlayer(i)) {
				SetActivatorToPlayer(i);
				if (!isGone(NULL)) count++;
			}
	}
	return count;
}

function bool deflectAttack(void) {
	if (CheckInventory("8C Deflect")) {
		PlaySound(0,"8CPAIN02",CHAN_VOICE,1.0,false);
		int isValid = SetActivator(0, AAPTR_DAMAGE_INFLICTOR);
		SpawnForced("8C Deflect gfx", GetActorX(0), GetActorY(0), GetActorZ(0));
		if (isValid && !CheckFlag(0, "DONTREFLECT")) {
            SetPointer(AAPTR_TARGET, 0, AAPTR_DAMAGE_TARGET);
			SetActorVelocity(0, -GetActorVelY(0), GetActorVelX(0), -16.0, false, false);
		}
		return true;
	}
    return false;
}

function bool isPacifist(void) {
	SetActivator(0, AAPTR_DAMAGE_TARGET); if (CheckInventory("8C Pacifist")) return true;
	SetActivator(0, AAPTR_DAMAGE_SOURCE); if (CheckInventory("8C Pacifist")) return true;
	return false;
}



















