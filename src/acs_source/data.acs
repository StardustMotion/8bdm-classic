////////////////////
// Script header  //
////////////////////

// ------------------------------------------ //
//    				server			     	  //
// ------------------------------------------ //

// ------------------- core ------------------- //
#DEFINE PHYSICS_8C 0
#DEFINE C8_XY_DIST 1
#DEFINE C8_Z_DIST 2
#DEFINE C8_IS_GONE 3
#DEFINE C8_COPY_VELOCITY 4
#DEFINE GET_VELOCITY 5
#DEFINE C8_CHECK_COLLISION 6
#DEFINE C8_SOLID_TOGGLE 7
#DEFINE C8_GET_USERVAR 8
	#DEFINE C8_USERVAR_BASECOLOR 0
#DEFINE INTRO_ANIMATION 9
#DEFINE C8_GOAL_CHECK 10
//#DEFINE NO_8C_FOG 11 // 8C.acs
#DEFINE C8_PACIFIST 12
#DEFINE GAME_STATUS_CHECK 13
#DEFINE EARTHQUAKE 14
#DEFINE C8_PTR_TO_THIS 15


// ------------------- rpg ------------------- //
#DEFINE RPG_INCARNATE 0
#DEFINE RPG_SUMMON_ENEMY 1





// ------------------- puke ------------------- //
#DEFINE PUKE_HERO_CREATE 0
#DEFINE PUKE_HERO_DELETE 1
#DEFINE PUKE_LOGIN_REFRESH 2
#DEFINE PUKE_ENTER_GAME 3
#DEFINE PUKE_GOAL 4


// ------------------------------------------ //
//    				client			     	  //
// ------------------------------------------ //

#DEFINE NET_CS_START_SCREEN 256
#DEFINE CS_START_SCREEN 257
    #DEFINE START_SCREEN_TITLE 1
    #DEFINE START_SCREEN_EXIT 2
    #DEFINE START_SCREEN_OPTIONS 3
    #DEFINE START_SCREEN_CREATE_HERO 4
    #DEFINE START_SCREEN_DATA 5
#DEFINE CS_CLIENT_PUKE 258
#DEFINE CS_HUD_TRANSITION 259
	#DEFINE CS_HUD_TRANSITION_STRIPES 0
	#DEFINE CS_HUD_TRANSITION_ALPHA 1
#DEFINE CS_CAMERA 260
#DEFINE CS_INTRO_HUD_ANIMATION 261
#DEFINE CS_INGAME_HUD 262
#DEFINE CS_ENEMY_PAIN 263
#DEFINE CS_GOAL_SCREEN 264
#DEFINE CS_TRANSITION_MESSAGE 265
	#DEFINE CS_TRANSITION_MESSAGE_LETTER 266
#DEFINE CS_CLOSURE_ANIMATION 267
#DEFINE CS_ACT_LOST 268
#DEFINE CS_SCREEN_FLASH 269
#DEFINE CS_EXP_ANIMATION 270
#DEFINE CS_POV 271
#DEFINE CS_PAIN_TINT 272


// ------------------------------------------------------------------------------------ //
// ------------------------------------------------------------------------------------ //
// ------------------------------------------------------------------------------------ //





////////////////////////////////////
//  	General settings		   //
////////////////////////////////////

#DEFINE CVAR_AUTOLOGIN "C8_autologin"


/////////////////
//  Constants  //
/////////////////

#DEFINE NULL 0
#DEFINE INT_MAX 0x7fffffff
#DEFINE INT_MIN 0x80000000

#DEFINE MAX_RANK 50
#DEFINE MAX_HERO 256
#DEFINE MAX_STAGE 256
#DEFINE MAX_ENEMY 1024

#DEFINE MAX_C8_PLAYERS 16
#DEFINE MAX_SLOTS 2 // slot == -1 value is used to refer to quick play slot
#DEFINE MAX_WEAPON_GROUPS 4

#DEFINE MENU_UP (BT_FORWARD)
#DEFINE MENU_DOWN (BT_BACK)
#DEFINE MENU_LEFT (BT_LEFT|BT_MOVELEFT)
#DEFINE MENU_RIGHT (BT_RIGHT|BT_MOVERIGHT)
#DEFINE MENU_YES (BT_ATTACK)
#DEFINE MENU_NO (BT_ALTATTACK)

#DEFINE SMALL_FONT 0
#DEFINE BIG_FONT 1
#DEFINE SMALL_FONT_RED 2

#DEFINE SFX_MENU "8CMENUB"
#DEFINE SFX_MENU_OK "8CMENUA"
#DEFINE SFX_MENU_BACK "8CMENUC"

#DEFINE DEFAULT_HUD_X 320
#DEFINE DEFAULT_HUD_Y 200

#DEFINE CAMERA_TID 7800

// hudmessage IDs
#DEFINE C8_BASE_HUD_ID 1
	#DEFINE HUD_ID_TRANSITION 	C8_BASE_HUD_ID					// fade in/out effects
	#DEFINE HUD_ID_SERVER_QUERY HUD_ID_TRANSITION+8 			// "waiting for server" overlay
	#DEFINE HUD_ID_MENU 		HUD_ID_SERVER_QUERY+3 			// title screen, goal menu
	#DEFINE HUD_ID_EFFECTS		HUD_ID_MENU+128 				// "ready" / act complete animations for example
	#DEFINE HUD_ID_HERO 		HUD_ID_EFFECTS+32				// in-game HUD




/////////////////
//  Runtime   //
/////////////////

#DEFINE CVAR_IS_FIRST_START "C8_is_first_start"

// Some "globa variables" for title screen
#DEFINE MENU_COMMON 0
#DEFINE MENU_INDEX 1
#DEFINE MENU_STATE 2 // 1+2

int client_menuStatus[5] = { 0, 0, 0, 0, 0 };
function int getMenu(void) { 					return client_menuStatus[MENU_COMMON]&0xFF; }
function void setMenu(int val) { 				client_menuStatus[MENU_COMMON] = (client_menuStatus[MENU_COMMON]&0xFFFFFF00)|val; }
function int getMenuTransition(void) { 			return ((client_menuStatus[MENU_COMMON])>>8)&0xFF; }
function void setMenuTransition(int val) { 		
	if (val) resetMenuArgs();
	client_menuStatus[MENU_COMMON] = (client_menuStatus[MENU_COMMON]&0xFFFF00FF)|(val<<8); 
}
function int getMenuRefresh(void) {				return ((client_menuStatus[MENU_COMMON])>>16)&0xFF; }
function void setMenuRefresh(int val) {			client_menuStatus[MENU_COMMON] = (client_menuStatus[MENU_COMMON]&0xFF00FFFF)|(val<<16); }
function bool getMenuQuery(void) {				return ((client_menuStatus[MENU_COMMON])>>24)&0xFF; }
function void setMenuQuery(int val) {			client_menuStatus[MENU_COMMON] = (client_menuStatus[MENU_COMMON]&0x00FFFFFF)|(val<<24); }
function int getMenuIndex(void) {				return client_menuStatus[MENU_INDEX]; }
function void setMenuIndex(int val) {			client_menuStatus[MENU_INDEX] = val; }
// arg [0,2]
function int getMenuArg(int arg) {				return client_menuStatus[MENU_STATE+arg]; }
function void setMenuArg(int arg, int val) {	client_menuStatus[MENU_STATE+arg] = val; }

function bool inMenu(void) {					return !!getMenu(); }
function void resetMenu(void) {					for (int i=0; i < 5; i++) client_menuStatus[i] = 0; }
function void resetMenuArgs(void) {              for (int i = 0; i < 3; i++) setMenuArg(i,0); }











/////////////////////////////////
//  	Runtime data		   //
/////////////////////////////////

#DEFINE CVAR_GAME_STATUS "C8_game_status"
function int isGameAlreadyBooted(void) {							return get4bFlagVal(CVAR_GAME_STATUS,false,0); }
function void setGameAlreadyBooted(void) {							set4bFlagVal(CVAR_GAME_STATUS,false,0,true); }
function int getLives(void) {										return get4bFlagVal(CVAR_GAME_STATUS,false,1); }
function void setLives(int lives) {									set4bFlagVal(CVAR_GAME_STATUS,false,1,lives); }
function int getGoal(void) {										return get4bFlagVal(CVAR_GAME_STATUS,false,2); }
function void setGoal(int players) {								set4bFlagVal(CVAR_GAME_STATUS,false,2,players); }
function int getSelectedPlayers(void) {								return get4bFlagVal(CVAR_GAME_STATUS,false,3); }
function void setSelectedPlayers(int players) {						set4bFlagVal(CVAR_GAME_STATUS,false,3,players); }
function int getMinSurvivors(void) {								return get4bFlagVal(CVAR_GAME_STATUS,false,4); }
function void setMinSurvivors(int players) {						set4bFlagVal(CVAR_GAME_STATUS,false,4,players); }
function int isGameInTransition(void) {								return get4bFlagVal(CVAR_GAME_STATUS,false,5); }
function void setGameInTransition(int state) {						set4bFlagVal(CVAR_GAME_STATUS,false,5,state); }
function int getAct(void) {											return get4bFlagVal(CVAR_GAME_STATUS,false,6); }
function void setAct(int act) {										set4bFlagVal(CVAR_GAME_STATUS,false,6,act); }

#DEFINE CVAR_EXP_POOL "C8_exp_pool_"
// the stored value is made <<4
function int getExpPool(int player) {								return GetCvar(__expPool(player)); }
function void setExpPool(int player, int expPool) {					SetCVar(__expPool(player), expPool); }
function str __expPool(int player) { 								return strParam(s:CVAR_EXP_POOL, d:player); }


// ------------------------------------------------------------------------ //

#DEFINE CVAR_HERO_SIZE "C8_hero_size"
function int getHeroSize(void) { 				        	    	return GetCvar(CVAR_HERO_SIZE); }
#DEFINE CVAR_HERO "C8_hero_"
function int getHeroFromIndex(int index) { 				        	return get8bFlagVal(CVAR_HERO, true, index); }
function void setHeroFromIndex(int index, int heroId) {				set8bFlagVal(CVAR_HERO, true, index, heroId); }

#DEFINE CVAR_STAGE_SIZE "C8_stage_size"
function int getStageSize(void) { 				        	    	return GetCvar(CVAR_STAGE_SIZE); }
#DEFINE CVAR_STAGE "C8_stage_"
function int getStageFromIndex(int index) { 			        	return get8bFlagVal(CVAR_STAGE, true, index); }
function void setStageFromIndex(int index, int stageId) {			set8bFlagVal(CVAR_STAGE, true, index, stageId); }

#DEFINE CVAR_SELECTED_PLAYERS "C8_selected_players"
function bool isSelectedPlayer(int player) {						return getBit(GetCvar(CVAR_SELECTED_PLAYERS), player); }
function void selectPlayer(int player) {							SetCVar(CVAR_SELECTED_PLAYERS, bitOn(GetCvar(CVAR_SELECTED_PLAYERS), player)); }
function void clearSelectedPlayers(void) {							SetCVar(CVAR_SELECTED_PLAYERS, 0); }
// ---------------------------------------------------------------------------------------------------------- //

// a client cache to store PlayerIsLoggedIn()
#DEFINE CVAR_LOGIN "C8_login_"
function str getLogin(int player) { 								return strSanitize(GetCvarString(__login(player))); }
function void setLogin(int player, str login) { 					SetCVarString(__login(player), login); }
function str __login(int player) { 									return strParam(s:CVAR_LOGIN, d:player); }
function bool isLoggedIn(int player) { 								return isNetworkGame() && strLen(getLogin(player)); }

#DEFINE CVAR_SLOT "C8_slot"
function int getAllowedSlot(int player) { 							return get2bFlagVal(CVAR_SLOT, false, player)-2; }
function void setAllowedSlot(int player, int val) { 				set2bFlagVal(CVAR_SLOT, false, player, val+2); }
function bool isSlotAllowed(int player) {							return getAllowedSlot(player)!=-2; }

#DEFINE CVAR_PLAYER_HERO "C8_player_hero_"
function int getPlayerHero(int player, int slot) { 					return get8bFlagVal(__playerHero(slot), true, player)-1; }
function void setPlayerHero(int player, int slot, int val) { 		set8bFlagVal(__playerHero(slot), true, player, val+1); }
function bool isPlayerAnomaly(int player, int slot) {				return getPlayerHero(player,slot)==(getHeroSize()-1); }
function bool isSlotEmpty(int player, int slot) {                   return getPlayerHero(player,slot) == -1; }
function str __playerHero(int slot) { 								return strParam(s:CVAR_PLAYER_HERO, d:slot+1); }

#DEFINE CVAR_EXP "C8_exp_"
function int getExp(int player, int slot) {							return GetCvar(__exp(player,slot)); }
function void setExp(int player, int slot, int exp) {				SetCVar(__exp(player,slot), exp); }
function int getRank(int player, int slot) {						return expToRank(getExp(player,slot)); }
function int expToRank(int exp) {									return 1 + exp/1000; }
function str __exp(int player, int slot) {							return strParam(s:CVAR_EXP, d:slot+1, d:player); }

#DEFINE CVAR_WEP "C8_wep_"
function bool isWepUnlocked(int player, int slot, int index) {		return getBoolFlagVal(__wep(player,slot), index); }
function void unlockWep(int player, int slot, int index) {			setBoolFlagVal(__wep(player,slot), index, true); }
function str __wep(int player, int slot) {							return strParam(s:CVAR_WEP, d:slot+1, d:player); }
function void clearWeps(int player, int slot) {						for (int i = 0; i < (MAX_STAGE>>5); i++) SetCVar(strParam(s:__wep(player,slot), d:i), 0); }

////////////////////////////////////
//  	Data-specific field	 	 //
////////////////////////////////////

// Those need getHeroFromIndex to transform the runtime id (array of heroes loaded) into the cvar-defined hero ID

// --------------------------------------------- Hero ------------------------------------------------- //

function str getHeroActor(int index) {								return GetCvarString(strParam(s:"C8_hero_actor_", d:getHeroFromIndex(index))); }

function str getHeroName(int index) {								return GetCvarString(__heroName(getHeroFromIndex(index))); }
	function str __getHeroName(int heroId) {						return GetCvarString(__heroName(heroId)); }
	function str __heroName(int heroId) {							return strParam(s:"C8_hero_name_", d:heroId); }

function int getHeroStats(int index) {								return GetCvar(strParam(s:"C8_hero_stats_", d:getHeroFromIndex(index))); }
function int getHeroWeapons(int index) {							return GetCvar(strParam(s:"C8_hero_weapons_", d:getHeroFromIndex(index))); }
function int getHeroWeaponGroups(int index) {						return valueOr(GetCvar(strParam(s:"C8_hero_weapon_groups_", d:getHeroFromIndex(index))),1); }
function str getSpSkill(int index) {								return GetCvarString(strParam(s:"C8_sp_skill_", d:getHeroFromIndex(index))); }
function str getHeroText(int index) {								return GetCvarString(strParam(s:"C8_hero_text_", d:getHeroFromIndex(index))); }

function str getHeroMugshot(int index) {							return __getHeroGraphic(index,0); }
function str getHeroIdle(int index) {								return __getHeroGraphic(index,1); }
function str getHeroSelected(int index) {							return __getHeroGraphic(index,2); }
function str __getHeroGraphic(int index, int element) {				return char8parser(GetCvarString(strParam(s:"C8_hero_graphic_", d:getHeroFromIndex(index))), element); }





// --------------------------------------------- Stage ------------------------------------------------- //

function str getStageIcon(int index) {								return GetCvarString(strParam(s:"C8_stage_icon_", d:getStageFromIndex(index))); }

function str getStageCode(int index) {								return GetCvarString(__stageCode(getStageFromIndex(index))); }
	function str __getStageCode(int stageId) {						return GetCvarString(__stageCode(stageId)); }
	function str __stageCode(int stageId) {							return strParam(s:"C8_stage_code_", d:stageId); }

function str getMusic(int index, int act) {							return char8parser(GetCvarString(strParam(s:"C8_music_", d:getStageFromIndex(index))), act); }
















// --------------------------------------------- Enemy ------------------------------------------------- //

// Those are compile time (CVAR) id
function str getEnemyName(int id) {									return strSanitize(GetCvarString(strParam(s:"C8_enemy_name_", d:id))); }
function int getEnemyStats(int id) {								return GetCvar(strParam(s:"C8_enemy_stats_", d:id)); }
function int getPower(int id) {										return GetCvar(strParam(s:"C8_power_", d:id)); }







// --------------------------------------------- Misc/Actor ------------------------------------------------- //

#DEFINE ENEMY_VAR_COLOR "user_8C_color"
#DEFINE ENEMY_VAR_BASECOLOR "user_8C_basecolor"
#DEFINE USERVAR_PUISSANCE "user_8C_puissance"
#DEFINE USERVAR_RESILIENCE "user_8C_resilience"
function int getActorID(void) {										return CheckInventory("8C ID"); }
function int getActorRank(void) {									return CheckInventory("8C Rank"); }
function void setActorRank(int rank) {								SetInventory("8C Rank", rank); updateStats(true); }
function bool isActorAnomaly(void) {								return getActorID()==(getHeroSize()-1); }
function bool isEnemy(void) {										return (getActorRank() && !(ClassifyActor(0)&ACTOR_PLAYER)); }
function bool isShiny(void) {										return CheckInventory("8C is Shiny"); }

