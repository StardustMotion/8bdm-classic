
////////////////////////////////////
//  	General settings		   //
////////////////////////////////////

#DEFINE CVAR_AUTOLOGIN "C8_autologin"



////////////////////////////////////
//  	Runtime settings		   //
////////////////////////////////////

#DEFINE CVAR_HERO_SIZE "C8_hero_size"
function int getHeroSize(void) { 				        	    	return GetCvar(CVAR_HERO_SIZE); }

#DEFINE CVAR_HERO "C8_hero_"
function int getHeroFromIndex(int index) { 				        	return get8bFlagVal(CVAR_HERO, true, index); }
function void setHeroFromIndex(int index, int heroId) {				set8bFlagVal(CVAR_HERO, true, index, heroId); }

#DEFINE CVAR_LOGIN "C8_login_"
function str getLogin(int player) { 								return strSanitize(GetCvarString(__login(player))); }
function void setLogin(int player, str login) { 					SetCVarString(__login(player), login); }
function str __login(int player) { 									return strParam(s:CVAR_LOGIN, d:player); }
function bool isLoggedIn(int player) { 								return isNetworkGame() && strLen(getLogin(player)); }

#DEFINE CVAR_SLOT "C8_slot"
// return -1 for quick play, 0 and 1 for account slots
function int getSlot(int player) { 									return get2bFlagVal(CVAR_SLOT, false, player)-1; }
function void setSlot(int player, int val) { 						set2bFlagVal(CVAR_SLOT, false, player, val+1); }

#DEFINE CVAR_PLAYER_HERO "C8_player_hero_"
function int getPlayerHero(int player, int slot) { 					return get8bFlagVal(__playerHero(player,slot), true, player)-1; }
function void setPlayerHero(int player, int slot, int val) { 		set8bFlagVal(__playerHero(player,slot), true, player, val+1); }
function bool isSlotEmpty(int player, int slot) {                   return getPlayerHero(player,slot) == -1; }
function str __playerHero(int player, int slot) { 					return strParam(s:CVAR_PLAYER_HERO, d:slot+1); }

#DEFINE CVAR_EXP "C8_exp_"
function int getExp(int player, int slot) {							return GetCvar(__exp(player,slot)); }
function void setExp(int player, int slot, int exp) {				SetCVar(__exp(player,slot), exp); }
function str __exp(int player, int slot) {							return strParam(s:CVAR_EXP, d:slot+1, d:player); }

#DEFINE CVAR_WEP_UNLOCKED "C8_wep_unlocked_"
function bool getWepUnlocked(int player, int slot) {				return GetCvar(__wepUnlocked(player,slot)); }
function void unlockWeapon(int player, int slot, int wepId) {
	str cvar = __wepUnlocked(player,slot); 
	SetCVar(cvar, GetCvar(cvar) | (1 << wepId));
}
function void setWepUnlocked(int player, int slot, int weps) {		SetCVar(__wepUnlocked(player,slot), weps); }
function str __wepUnlocked(int player, int slot) {					return strParam(s:CVAR_WEP_UNLOCKED, d:slot+1, d:player); }



////////////////////////////////////
//  Hero/enemy specific fields    //
////////////////////////////////////

// Those need getHeroFromIndex to transform the runtime id (array of heroes loaded) into the cvar-defined hero ID

function str getHeroActor(int index) {								return GetCvarString(strParam(s:"C8_hero_actor_", d:getHeroFromIndex(index))); }

function str getHeroName(int index) {								return GetCvarString(__heroName(getHeroFromIndex(index))); }
	function str __getHeroName(int heroId) {						return GetCvarString(__heroName(heroId)); }
	function str __heroName(int heroId) {							return strParam(s:"C8_hero_name_", d:heroId); }
function int getHeroHP(int index) {									return GetCvar(strParam(s:"C8_hero_hp_", d:getHeroFromIndex(index))); }
function int getHeroPuissance(int index) {							return GetCvar(strParam(s:"C8_hero_puissance_", d:getHeroFromIndex(index))); }
function int getHeroWeapons(int index) {							return GetCvar(strParam(s:"C8_hero_weapons_", d:getHeroFromIndex(index))); }
function int getHeroWeaponGroups(int index) {						return valueOr(GetCvar(strParam(s:"C8_hero_weapon_groups_", d:getHeroFromIndex(index))),1); }
function str getSpSkill(int index) {								return GetCvarString(strParam(s:"C8_sp_skill_", d:getHeroFromIndex(index))); }
function str getHeroText(int index) {								return GetCvarString(strParam(s:"C8_hero_text_", d:getHeroFromIndex(index))); }

function str getHeroMugshot(int index) {							return __getHeroGraphic(index,0); }
function str getHeroIdle(int index) {								return __getHeroGraphic(index,1); }
function str getHeroSelected(int index) {							return __getHeroGraphic(index,2); }
function str __getHeroGraphic(int index, int shift) {
	str base = __heroGraphic(index);
	if (shift)
		base = strRight(base, strLen(base)-(shift*9));
	return strLeft(base, 8);
}
function str __heroGraphic(int index) { 							return GetCvarString(strParam(s:"C8_hero_graphic_", d:getHeroFromIndex(index))); }



// testers
script "seto" (int i, int j) { setSlot(i,j); delay(1); log(d:getSlot(i)); }
script "geto" (int i) { log(s:getHeroName(i)); }




//////////////////////
// Database schema  //
//////////////////////

#DEFINE DB_FIELD_HERO_ID "player_hero_"
#DEFINE DB_FIELD_WEAPON "weapon_"
#DEFINE DB_FIELD_EXP "exp_"








/////////////////
//  Constants  //
/////////////////

#DEFINE INT_MAX 0x7fffffff
#DEFINE INT_MIN 0x80000000

#DEFINE MAX_HERO 256
#DEFINE MAX_CLIENTS 16
// -1 value is used to refer to quick play slot
#DEFINE MAX_SLOTS 2


#DEFINE MENU_UP (BT_FORWARD)
#DEFINE MENU_DOWN (BT_BACK)
#DEFINE MENU_LEFT (BT_LEFT|BT_MOVELEFT)
#DEFINE MENU_RIGHT (BT_RIGHT|BT_MOVERIGHT)
#DEFINE MENU_YES (BT_ATTACK)
#DEFINE MENU_NO (BT_ALTATTACK)





/////////////////
//  Runtime   //
/////////////////

// Used for title screen and weapon selection
int client_menuStatus = -1;
function int getMenu(void) { return client_menuStatus; }
function void setMenu(int id) { client_menuStatus = id; }
function bool inMenu(void) { return getMenu() != -1; }