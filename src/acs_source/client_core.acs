
#DEFINE MENU_OFFSET 48.0
#DEFINE MENU_FLASH_OFFSET 37.0

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Core scripts  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //


#DEFINE INCARNATION_INTRO_CAMDIST 256.0
#DEFINE INCARNATION_INTRO_ZOOM 20
int pukeRequestId = 0;
script "8C CS" (int type, int arg1, int arg2, int arg3) CLIENTSIDE {
	int localPlayer = ConsolePlayerNumber();
    switch(type) {
        case CS_START_SCREEN:
			if (inMenu() | !PlayerIsSpectator(localPlayer))
                terminate; 
            resetMenu();
            ACS_NamedExecuteWithResult("8C CS", CS_HUD_TRANSITION, CS_HUD_TRANSITION_STRIPES, true);
            delay(18);
			LocalSetMusic("8CDATA");
		 	setMenu(START_SCREEN_TITLE);
            setMenuTransition(START_SCREEN_TITLE);
            ACS_NamedExecuteWithResult("8C CS", CS_HUD_TRANSITION, CS_HUD_TRANSITION_ALPHA, false);
            int i = 0;
            arg2 = getMenuIndex();
            setMenuRefresh(true);
            arg1 = 0x100 | 0x6;
            while (true) {
                //log(s:"state ", d:getMenuArg(0), s:", ", d:getMenuArg(1), s:", ", d:getMenuArg(2),s:" transition ", d:getMenuTransition(), s:" index ", d:getMenuIndex(), s:" arg1 ", d:arg1);
                if (getMenuTransition()) {
                    // stripes transition
                    if (getMenuTransition()>>6) { 
                        if (!arg1) 
                            ACS_NamedExecuteWithResult("8C CS", CS_HUD_TRANSITION, CS_HUD_TRANSITION_STRIPES, true);
                        else if (arg1 == 15) {
                            setMenu(getMenuTransition()&0x3F);
                            eraseAll(HUD_ID_MENU,128);
                            setMenuIndex(0); setMenuRefresh(true);
                            ACS_NamedExecuteWithResult("8C CS", CS_HUD_TRANSITION, CS_HUD_TRANSITION_STRIPES, false);
                        }
                        else if (arg1 == 30) {
                            setMenuTransition(0);
                            arg1 = 0; continue;
                        }
                        arg1++;
                    }
                    // alpha transition
                    else {
                        if (arg1>>8) {
                            arg1++;
                            if ((arg1&0xFF) == 7) {
                                setMenu(getMenuTransition());
                                eraseAll(HUD_ID_MENU,128);
                                arg1&=0xFF;
                                setMenuIndex(0);    setMenuRefresh(true);
                                if (getMenuTransition()==START_SCREEN_EXIT)
                                    break;
								else 
                            		ACS_NamedExecuteWithResult("8C CS", CS_HUD_TRANSITION, CS_HUD_TRANSITION_ALPHA, false);
                            }
                        }
                        else if (arg1) {
                            arg1--;
                            if (!arg1) setMenuTransition(0);
                        }  
                        else {
                            ACS_NamedExecuteWithResult("8C CS", CS_HUD_TRANSITION, CS_HUD_TRANSITION_ALPHA, true);
							arg1 = 0x100;
						}           
                    }
                }
                startScreen();
                drawBI("8CMENU0Q",0,-160.1+((i*80)&0xFFFF0000), -96.1+((i*96)&0xFFFF0000),0,0); // background
                i = (i-512)&0xFFFF;
                delay(1);
            }
			delay(10);
            ACS_NamedExecuteWithResult("8C CS", CS_HUD_TRANSITION, CS_HUD_TRANSITION_STRIPES, false);
			stageMusic(true);
            delay(16);
            setMenu(0);
            if (getMenuArg(2)>>24)
                consolecommand("menu_joingame");
        break;

        // arg1 = the server NET script to puke. Add bitflag PUKE_SILENT to not display "waiting for server"
		// arg2/3 = 2 usable arguments
		case CS_CLIENT_PUKE:
			i = arg1>>16;
			arg1&=0xFFFF;
			pukeRequestId++;
			setPukeStatus(0);
			str pukeDebug = strParam(
				s:"\cd<-- PUKE #", d:pukeRequestId, s:" (", d:ConsolePlayerNumber(), s:")",
				s:i ? " ----- " : "",
				s:" [net ", d:arg1, 
				s:" - arg1 ", d:arg2, 
				s:" - arg2 ", d:arg3, s:"]"
			);
			//log(s:pukeDebug);
			type = 0;
			do {
				// ---------------------------------------------------------- //
				if (!i) {
                	drawBI("8CMET", 					HUD_ID_SERVER_QUERY, 12.1, 141.2, 240, 150);
                	drawBT("Waiting for\n\n server...", HUD_ID_SERVER_QUERY+1, 108.0, 212.2, 368, 230);
             		draw("8CBLACK", 					HUD_ID_SERVER_QUERY+2, false, 0, 0,  1, 1, 0.05, 0.75);
				}   
				// ---------------------------------------------------------- //
				NamedRequestScriptPuke("8C Puke", (pukeRequestId<<16)|arg1, arg2, arg3);
				delay(1);
				if (type >= PUKE_TIMEOUT_DURATION) {
					setPukeStatus(PUKE_TIMED_OUT);
					break;
				}
				else if ((CheckInventory("8C Puke Response")>>16)==pukeRequestId) { 
					setPukeStatus(CheckInventory("8C Puke Response")&0xFFFF);
					break;
				}	
				type++;
			} while(true);
			eraseAll(HUD_ID_SERVER_QUERY,3);
			int status = getPukeStatus();
			log(s:pukeDebug, s:" = ", 
				s:( status & PUKE_OK ? "\cvOK" : 
					status & PUKE_ERROR ? "\cgERROR" : 
					status & PUKE_TIMED_OUT ? "\cqTIMED OUT" :
					"???"));
		break;

		// @arg1 for animation type : 0 stripes, 1 alpha
		// @arg2 in/out
        case CS_HUD_TRANSITION:
			eraseAll(HUD_ID_TRANSITION,2);
			switch(arg1) {
				case CS_HUD_TRANSITION_STRIPES:
					if (arg2) { type = 0; localPlayer = 16; arg3 = 1; }
					else { type = 16; localPlayer = 0; arg3 = -1; }
					for (type = type; type != localPlayer; type += arg3) {
						drawBI("8CTRANS0", HUD_ID_TRANSITION,    -32.0 + 2.0*type, 8.0, 16, 16);
						drawBI("8CTRANS0", HUD_ID_TRANSITION+1,  48.0  - 2.0*type, 9.0, 16, 16);
						delay(1);
					}
				break;

				case CS_HUD_TRANSITION_ALPHA:
					if (arg2) { type = 0; localPlayer = 8; arg3 = 1; }
					else { type = 7; localPlayer = -1; arg3 = -1; }
					for (type = type; type != localPlayer; type += arg3) {
                        draw("8CBLACK", HUD_ID_TRANSITION, false, 0, 0,  1, 1, 0, FixedDiv(type<<16,7.0));
						delay(1);
					}
				break;
			}
        break;
        
		case CS_CAMERA:
			type = activatorTID();
			if (localPlayer != type-CAMERA_TID) {
				Thing_Remove(0);
				terminate;
			}
			SetActivatorToTarget(0);
			arg1 = (GetActorProperty(0,APROP_ViewHeight)); // eye level
			arg2 = INCARNATION_INTRO_CAMDIST/INCARNATION_INTRO_ZOOM;
			for (i = INCARNATION_INTRO_TIME; i; i--) {
				ChangeCamera(type,0,0);
				Warp(type, 
					-4.0, 0, -(GetActorZ(0)-GetActorFloorZ(0))+arg1, 
					0, WARPF_MOVEPTR | WARPF_NOCHECKPOSITION);
				SetActorPitch(type,0);
				if (i <= INCARNATION_INTRO_ZOOM)	cameraExtend(type, INCARNATION_INTRO_CAMDIST-((INCARNATION_INTRO_ZOOM-i)*arg2));	
				else								cameraExtend(type, INCARNATION_INTRO_CAMDIST);	
				ActorLookAt(type,0,arg1,0);
				delay(1);
			}
			Thing_Remove(type);
		break;

		case CS_INTRO_HUD_ANIMATION:
			if (localPlayer != arg1) terminate;
			arg1 = 0; // main scene view order offset
			arg2 = 0; // "ready" space border offset
			arg3 = 0; // zoom to char border offset
			int tmp = 0;
			type = 4;
			for (i = 0; i < INCARNATION_INTRO_TIME; i++) {
				if (i > INCARNATION_INTRO_TIME-INCARNATION_INTRO_ZOOM)
					arg3 += 1.5; //FixedDiv(30.0,INCARNATION_INTRO_ZOOM<<16);
			
				drawBorders(tmp<<16,(arg1+arg2+arg3)&0xFFFF0000,0);

				if (arg2 < 16.0) 
					arg2 += 4.0;
				else {
					if (i < INCARNATION_INTRO_READY_TIME) {
						if (type) 	localPlayer = 0.65;
						else		localPlayer = (!!((i>>2)&0x1))<<16;
						// "ready" text
						draw("8CINTROC", 0, false, 159.0-(type<<22), 139.0, 320, 280, 0.05, localPlayer);
						draw("8CINTROD", 0, false, 161.0+(type<<22), 141.0, 320, 280, 0.05, localPlayer);
						if (i >= (INCARNATION_INTRO_READY_TIME-4)) 
							type++;
						else if (type) 
							type--;
					}
					if ((i >= INCARNATION_PREINTRO_TIME) && (arg1 < 55.0)) 
						arg1 += 5.0;
				}
				tmp = (tmp + (arg1 ? 8 : 2))&0xFF; // %256
				delay(1);
			}
			eraseAll(HUD_ID_EFFECTS,8);
		break;

		case CS_INGAME_HUD:
			if (PlayerNumber() != localPlayer) terminate;
			arg1 = getAllowedSlot(localPlayer);
			tmp = getExp(localPlayer, arg1); // current xp
			int j = 0; 
			int x = getLives();
			while (!isGone(NULL)) {
				// lives
				drawBI("8CNUMB2D", HUD_ID_HERO+9, 51.0, 250.0, 400, 300); 
				draw8cNumber(x, HUD_ID_HERO+8, 57.0, 211.0, 340, 255, SMALL_FONT_RED, true);
				//mugshot
				drawBI(getHeroMugshot(getActorID()), HUD_ID_HERO+11, 36.0, 264.0, 400, 300);
				drawBI("8CMUGB00", HUD_ID_HERO+10, 36.0, 264.0, 400, 300);
				//hp/maxhp
				arg3 = GetActorProperty(0,APROP_Health);
				type = GetActorProperty(0,APROP_SpawnHealth);
				draw8cNumber(arg3, 0, 120.0, 159.0, 270, 200, SMALL_FONT, true);
				draw8cNumber(type, 0, 180.0, 269.0, 420, 315, SMALL_FONT, true);
				draw8cBar("8CBARHP", true, FixedDiv(arg3<<16, type<<16), 75.0-33.0, 183.0, 250, 220);
				drawBI("8CNUMB0A", HUD_ID_HERO+30, 146.0, 269.0, 450, 315); // maxhp slash
				drawBI("8CNUMB0C", HUD_ID_HERO+31, 156.0, 258.0, 400, 280); // xp percent
				// players on goal
				int y = getGoal();
				if (y) {
					draw8cNumber(y,HUD_ID_HERO+40,177.0,232.0,360,240,SMALL_FONT_RED,true);
					drawBI("8CNUMB2A", HUD_ID_HERO+41, 180.0, 232.0, 360, 240);
					draw8cNumber(getMinSurvivors(),HUD_ID_HERO+42,196.0,232.0,360,240,SMALL_FONT_RED,true);
					drawBI("8CGOALHD", HUD_ID_HERO+43, 144.0, 218.0, 260, 190);
				}
				else
					eraseAll(HUD_ID_HERO+40,4);

				arg3 = getExpPool(localPlayer);
				if (j<0) j++;
				else {
					j = getExp(localPlayer,arg1);
					if (j > tmp) { // act complete
						ACS_NamedExecuteWithResult("8C CS", CS_EXP_ANIMATION, tmp, j);
						tmp = j;
						j = -105;
						continue;
					}
					// exp pool
					drawBI("8CNUMB0B", HUD_ID_HERO+32, 160.0-11.0*((arg3>99)+(arg3>999)), 304.0, 472, 330); 
					draw8cNumber(arg3/10, 0, 159.0, 290.0, 420, 315, SMALL_FONT, true);
					// rank
					arg2 = getActorRank();
					draw8cNumber(arg2, HUD_ID_HERO+6, 40.0+9.0*(arg2>=10), 250.0, 340+120*(arg2>=10), 265, BIG_FONT, false);
				}
				// exp bar
				i = FixedDiv(((tmp%1000)+arg3)<<16,1000.0);
				draw8cBar(i>=1.0 ? "8CBARXP2" : "8CBARXP1", true, i, 56.0, 217.0, 320, 240);
				delay(1);
			}			
		break;

		case CS_EXP_ANIMATION:
			arg3 = arg2-arg1;
			x = expToRank(arg1), y = expToRank(arg2);
			arg2 = x; x = (x<y);
			if (x) sfx("8CRANKUP");
			for (i = 0; i < 106; i++) {
				if (arg3) {					
					arg3 = max(0,arg3-20);
					if (timer()&0x1) {
						draw("8CWHITE",HUD_ID_HERO+2,false,50.0,1030.0,183,1140,0.035,1.0);
						LocalAmbientSound("8CEXP",x ? 72 : 127);
					}
				}
				if (x) { // rank up
					if (i>=15) {
						type = max(0,30-i);
						draw("8CRANKUP",0,false, 52.0-3.0*type, 180.0-9.0*type, 320-16*type, 240-12*type, 0.05,FixedDiv((15-type)<<16,15.0));
					}				
					arg1 = (i <= 25 ? i : max(0, 50-i));
					if (i==25) {
						ACS_NamedExecuteWithResult("8C CS", CS_SCREEN_FLASH, HUD_ID_MENU, 10, 0.85);
						arg2 = y;
					}
					draw8cNumber(arg2, HUD_ID_HERO+6, 
						40.0+9.0*(arg2>=10), 	250.0 - 11.0*arg1,  340+120*(arg2>=10), 	265 - arg1*11, 
						BIG_FONT, false);
				}
				drawBI("8CNUMB0B", HUD_ID_HERO+32, 160.0-11.0*((arg3>99)+(arg3>999)), 304.0, 472, 330);
				draw8cNumber(arg3/10, 0, 159.0, 290.0, 420, 315, SMALL_FONT, true);				
				delay(1);
			}
		break;

		case CS_ENEMY_PAIN:
			PlaySound(0,"8CPAIN00",CHAN_VOICE,1.0,false);
			type = GetUserVariable(0, "user_colorId");
			for (i = 0; i < 3; i++) {
				Thing_SetTranslation(0, 68); delay(1); // CLR_BOSSPAIN
				enemyPalette(); delay(1);
			}
		break;

		// When entering the act goal
		case CS_GOAL_SCREEN:
			if (localPlayer != PlayerNumber()) terminate;
			resetMenu();
			for (i = 0; i < 10; i++) {
				draw("8CBLACK", HUD_ID_MENU+15, false, 0, 0,  1, 1, 0, (i<<16)/20);
				delay(1);
			}
			setMenuIndex(0);
			setMenuRefresh(true);
			drawBI("8CMENU04", HUD_ID_MENU+4, 160.0, 151.0, 320, 350);
			drawBI("8CMENU02", HUD_ID_MENU+5, 160.0, 192.0, 320, 350);
			drawMenuLabel("Back", HUD_ID_MENU+6, 144.0, true);
			j = 0; // is asking to leave?
			i = 0;
			status = false; // server accepted goal wait?
			while (!i) {
				draw("Waiting for players... ", 0, true, 150.4, 66.0, 288, 240, 0.05, abs(cos((timer()&0x1F)<<11)) );
				if (!getMenuQuery()) {
					if (!status) {
						ACS_NamedExecuteWithResult("8C CS", CS_CLIENT_PUKE, PUKE_GOAL, true); setMenuQuery(true);
					}
					else {
						if (isPressed(pressedStatus(), MENU_NO|MENU_YES)) {
							ACS_NamedExecuteWithResult("8C CS", CS_CLIENT_PUKE, PUKE_GOAL, false); setMenuQuery(true);
							j = 20;
							flashMenuLabel(HUD_ID_MENU+3,116.0);
							sfx(SFX_MENU_OK);
						}
					}
				}
				else {
					switch(getPukeStatus()) {
						case PUKE_OK:
							if 		(j) i = 1;
							else 	status = true;
							setMenuQuery(false);
						break;

						case PUKE_TIMED_OUT: case PUKE_ERROR:
							setMenuQuery(false);
						break;
					}
				}
				if (j>1) {
					j--;
					if (j==1) erase(HUD_ID_MENU+3);
				}
				delay(1);
				if (getGoal()>=getMinSurvivors()) break;
			}
			eraseAll(HUD_ID_MENU,15);
			for (i = 9; i >= 0; i--) {
				draw("8CBLACK", HUD_ID_MENU+15, false, 0, 0,  1, 1, 0.05, (i<<16)/20);
				delay(1);
			}
		break;

		/*
		@arg1 act/mission
		@arg2 complete/failed
		*/
		case CS_TRANSITION_MESSAGE:
			arg1 = arg1 ? "MISSION" : "ACT";
			type = arg2 ? "COMPLETE" : "FAILED";
			localPlayer = arg1;
			arg3 = 0;
			i = 0;
			tmp = 15;
			status = 3;
			j = strLen(arg1);
			while (true) {
				ACS_NamedExecuteWithResult("8C CS", CS_TRANSITION_MESSAGE_LETTER, 
					(arg2<<16)+getChar(arg1,i),
					((66.0-j*4.0 + 26.0*i+80.0*arg3)>>16)       +         (88.0 + 68.0*arg3), 
						((arg3 ? (j-i)*status : (j-i + strLen(type))*status+tmp) <<16)
						+i+arg3*8);
				delay(status);
				if (i < (j-1))
					i++;
				else {
					if (arg3)
						break;
					arg3 = 1;
					delay(tmp);
					arg1= type;	
					j = strLen(arg1);
					i= 0;				
				}
			}
			delay(25);
			AmbientSound("FRSTWHP1", 127);
		break;

		/*
		@arg1 [16b: letter color, 16b: letter char asciicode]
		@arg2 x/y (16b each)
		@arg3 [tics before fade, hudId]
		*/
		case CS_TRANSITION_MESSAGE_LETTER:
			arg3 += HUD_ID_EFFECTS;
			type = strParam(s:(arg1>>16 ? "8CX8BLU" : "8CX8RED"), c:arg1&0xFFFF);
			x = arg2<<16, y = arg2&0xFFFF0000;
			for (i = 0; i <= 10; i++) {
				draw(type, arg3&0xFFFF, false,
					x, y,
					120 + i*20,
					100 + i*20,
					5.0, 0.7);
				delay(1);
			}
			draw(type, arg3&0xFFFF, false, x, y, 320, 300, 5.0, 1.0);
			AmbientSound("CNTRSHDS", 127);
			delay((arg3>>16) + 15);
			for (i = 0; i < 16; i++) {
				draw(type, arg3&0xFFFF, false, x, y, 320, 300, 0.05, (i&0x1)<<16);
				delay(1);
			}

		break;

		case CS_CLOSURE_ANIMATION:
			AmbientSound("8CMENCLP",127);
			tmp = 0;
			for (i = 10, arg1 = arg1-i; arg1; i=i) {
				drawBorders(4.0,10.0*i,tmp);
				delay(1);
				if (i) {
					i--; 
					if (!i) j = 10;
				} 
				else if (arg1) {
					if (j) {
						tmp = 5.0*(((j&0x1)<<1)-1);
						j--;
						if (!j) tmp = 0;
					} 
					arg1--;
				} 
			}
		break;

		case CS_ACT_LOST:
			if (getMinSurvivors()>1)    
				drawTypedT("\ccHalf the team is missing",HUD_ID_TRANSITION, 140.4, 42.0, 280, 175, 0.045);
			delay(100);
            ACS_NamedExecuteWithResult("8C CS", CS_HUD_TRANSITION, CS_HUD_TRANSITION_ALPHA, true);
			delay(10);
            ACS_NamedExecuteWithResult("8C CS", CS_HUD_TRANSITION, CS_HUD_TRANSITION_ALPHA, false);
			drawBorders(4.0,0,0);
		break;

		/* 
		@arg1 hudId
		@arg2 duration
		@arg3 intensity
		*/
		case CS_SCREEN_FLASH:
			for (i = 0; i < arg2; i++) {
				if (i&0x1)	erase(arg1);
				else	draw("8CWHITE", arg1, false, 0, 0,  1, 1, 0.05, arg3);
				delay(1);
			}
		break;

    }    
}

function void drawBorders(int xOffset, int yOffset, int shake) {
	for (int j = 0; j < 4; j++) {
		drawBI("8CINTROB", HUD_ID_EFFECTS+(j<<1), (672.0-xOffset)-(254.0*j), (45.0 -yOffset)+shake, 0, 0);
		drawBI("8CINTRO7", HUD_ID_EFFECTS+1+(j<<1), (-352.0+xOffset)+(254.0*j), (155.0 +yOffset)+shake, 0, 0);
	}	
}

function void stageMusic(bool local) {
	str name = !isMap8C ? "*" : getMusic(0,getAct()-1);
	if (local)	LocalSetMusic(name);
	else		SetMusic(name);
}

function void drawMenuLabel(str label, int id, int y, bool isSelected) {
	drawBI("8CMENU08", id, 160.0, y+24.0, 320, 350);
    drawBT(strParam(s:"\cc", s:label), id+1, 160.0, (FixedMul(y,0.763)&0xFFFF0000) + 22.0, 320, 270);
	drawBI(strParam(s: !isSelected ? "8CMENU06" : "8CMENU07"), id+2, 168.0, y+24.0, 320, 350);
}
function void flashMenuLabel(int id, int y) {
    drawBI("8CFLSWHI", id, 47.0, y+16.0, 93, 270); 
    sfx(SFX_MENU_OK);
}   





#DEFINE CAMERA_T 4
function void cameraExtend(int camera, int dist) {
	int dx = cos(GetActorAngle(camera))*CAMERA_T;
	int dy = sin(GetActorAngle(camera))*CAMERA_T;
	int dz = sin(GetActorPitch(camera))*CAMERA_T;
	int tMax = (dist/CAMERA_T)>>16;
	for (int t = 1; t <= tMax; t++) {
		int test = Warp(camera,
			GetActorX(camera)-dx, GetActorY(camera)-dy, GetActorZ(camera)-dz,
			0, WARPF_MOVEPTR | WARPF_ABSOLUTEPOSITION		
		);		
		if (!test) break;
	}
}


    
function void createTranslations(void) {	
	int i = ENEMY_COLOR+( 0 *ENEMY_COLOR_SIZE); // B G O
	CreateTranslation (i, 	192:192=168:168, 198:198=74:74);
	CreateTranslation (i+1, 192:192=66:66, 	198:198=251:251, 0:0=79:79);
	CreateTranslation (i+2, 192:192=168:168, 198:198=109:109);
	CreateTranslation (i+3, 192:192=202:202, 198:198=205:205, 0:0=207:207);
	CreateTranslation (i+4, 192:192=168:168, 198:198=225:225);
	CreateTranslation (i+5, 192:192=160:160, 198:198=41:41, 0:0=47:47);
	
	// Big Eye
    i = ENEMY_COLOR+( 1 *ENEMY_COLOR_SIZE); // R B G
	CreateTranslation (i, 192:192=168:168, 198:198=41:41);
	CreateTranslation (i+1, 192:192=217:217, 198:198=225:225, 247:247=188:188);	
	CreateTranslation (i+2, 192:192=168:168, 198:198=74:74 );
	CreateTranslation (i+3, 192:192=66:66,198:198=251:251,  247:247=79:79);		
	CreateTranslation (i+4,  192:192=168:168, 198:198=109:109);
	CreateTranslation (i+5, 192:192=160:160, 198:198=158:158, 247:247=11:11);	

	// Blaster
    i = ENEMY_COLOR+( 2 *ENEMY_COLOR_SIZE); // O R B
	CreateTranslation (i, 	192:192=168:168, 198:198=225:225);
	CreateTranslation (i+1, 192:192=104:104, 198:198=109:109, 247:247=125:125);	
	CreateTranslation (i+2, 192:192=168:168, 198:198=41:41);
	CreateTranslation (i+3, 192:192=217:217, 198:198=225:225, 247:247=188:188);		
	CreateTranslation (i+4, 192:192=168:168, 198:198=74:74);
	CreateTranslation (i+5, 192:192=66:66, 198:198=251:251, 247:247=79:79);	

	// Screw Driver
    i = ENEMY_COLOR+( 3 *ENEMY_COLOR_SIZE); // B O R
	CreateTranslation (i, 	192:192=168:168, 198:198=74:74);
	CreateTranslation (i+1, 192:192=66:66, 198:198=251:251, 247:247=79:79);
	CreateTranslation (i+2, 192:192=168:168, 198:198=225:225);
	CreateTranslation (i+3, 192:192=104:104, 198:198=109:109, 247:247=125:125);
	CreateTranslation (i+4, 192:192=168:168, 198:198=41:41);
	CreateTranslation (i+5, 192:192=160:160, 198:198=217:217, 247:247=188:188);


	// Kamadoma
    i = ENEMY_COLOR+( 4 *ENEMY_COLOR_SIZE); // R B G
	CreateTranslation (i, 192:192=168:168, 198:198=41:41);
	CreateTranslation (i+1, 192:192=217:217, 198:198=225:225, 247:247=188:188);	
	CreateTranslation (i+2, 192:192=168:168, 198:198=225:225);
	CreateTranslation (i+3, 192:192=66:66, 198:198=251:251, 247:247=79:79);		
	CreateTranslation (i+4,  192:192=168:168, 198:198=74:74);
	CreateTranslation (i+5, 192:192=160:160, 198:198=225:225, 247:247=11:11);	

	// Adhering Suzy
    i = ENEMY_COLOR+( 5 *ENEMY_COLOR_SIZE); // R O B
	CreateTranslation (i, 192:192=168:168, 198:198=41:41);
	CreateTranslation (i+1, 192:192=217:217, 198:198=225:225, 247:247=188:188);	
	CreateTranslation (i+2, 192:192=168:168, 198:198=74:74);
	CreateTranslation (i+3, 192:192=104:104, 198:198=109:109, 247:247=125:125);	
	CreateTranslation (i+4,  192:192=168:168, 198:198=109:109);
	CreateTranslation (i+5, 192:192=66:66, 198:198=251:251, 247:247=79:79);	

	// Manbu
    i = ENEMY_COLOR+( 6 *ENEMY_COLOR_SIZE); // O G R
	CreateTranslation (i, 192:192=168:168, 198:198=225:225);
	CreateTranslation (i+1, 192:192=104:104, 198:198=109:109, 247:247=125:125);
	CreateTranslation (i+2, 192:192=168:168, 198:198=109:109);
	CreateTranslation (i+3, 192:192=202:202, 198:198=205:205, 0:0=207:207);
	CreateTranslation (i+4,  192:192=168:168, 198:198=41:41);
	CreateTranslation (i+5, 192:192=160:160, 198:198=228:228, 247:247=158:158);	

	// Cutting Wheel
    i = ENEMY_COLOR+( 7 *ENEMY_COLOR_SIZE);// ? ? ?
	CreateTranslation (i, 192:192=178:178, 198:198=245:245, 4:4=168:168, 0:0=6:6);
	CreateTranslation (i+1, 192:192=6:6, 4:4=80:80, 0:0=6:6, 198:198=91:91);
	CreateTranslation (i+2, 192:192=225:225, 198:198=109:109, 4:4=168:168, 0:0=6:6);
	CreateTranslation (i+3, 192:192=91:91, 198:198=83:83, 4:4=168:168, 0:0=91:91);
	CreateTranslation (i+4, 192:192=74:74, 198:198=41:41, 4:4=168:168, 0:0=6:6);
	CreateTranslation (i+5, 192:192=80:80, 198:198=91:91, 4:4=6:6, 0:0=168:168);
}