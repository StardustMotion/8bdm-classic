


	//////////////////////////////////////////////////////////
//                           Data             				    //
	//////////////////////////////////////////////////////////
	
#DEFINE INCARNATE 0
#DEFINE INTRO_ANIMATION 1
#DEFINE PHYSICS_8C 2

#DEFINE HERO_SIZE 6 // 32 128
#DEFINE ENEMY_SIZE 24
int ACTOR[HERO_SIZE+ENEMY_SIZE][3];
int heroCount = 0, enemyCount = 0;

function bool isEnemy(void) { return (CheckInventory("8C ID")>=HERO_SIZE); }

function void printActorTable (void) {
	for (int i = 0; i < HERO_SIZE+ENEMY_SIZE; i++) {
        if (i<HERO_SIZE) int j =    strParam(s:"\cn",d:i);
        else j =                    strParam(s:"\ci",d:i-HERO_SIZE);
		log(s:j, s:" : [ ", s:getName(i), s:", ", f:getHP(i), s:", ", f:getPuissance(i), s:" ]");
    }
}

// move getter to API maybe
function str getName(int id) { return ACTOR[id][0]; }
function str getHP(int id) { return ACTOR[id][1]; }
function str getPuissance(int id) { return ACTOR[id][2]; }

function int getLevel(void) { return GetUserVariable(0,"user_8C_level"); }
function void setLevel(int level) { SetUserVariable(0,"user_8C_level",level); }

#DEFINE STAT_PER_LEVEL 0.1
function int calcStatLerp(int base, int level) { return roundf(base + FixedMul(base,STAT_PER_LEVEL)*level); }













	//////////////////////////////////////////////////////////
//                           Events             				//
	//////////////////////////////////////////////////////////

bool forcePhysics = false;
bool isMap8C = false;
script "8C OPEN" OPEN {	
	forcePhysics = GetCvar("C8_PHYSICS");
	isMap8C = !strCmp(strLeft(strParam(n:PRINTNAME_LEVEL), 3),"8C-");
	init();
    loadActors();
}

script "8C ENTER" ENTER {
	delay(1);
	ACS_NamedExecuteWithResult("8C", INCARNATE, random(0,1));
	if (isMap8C || forcePhysics) 	ACS_NamedExecuteWithResult("8C", PHYSICS_8C);
	if (isMap8C) 					ACS_NamedExecuteWithResult("8C", INTRO_ANIMATION);
}
script "8C RESPAWN" RESPAWN {
	ACS_NamedExecuteWithResult("8C ENTER");
}


script "8C EVENT" (int type, int base, int damageType) EVENT {
	switch(type) {
		case GAMEEVENT_ACTOR_DAMAGED:
			//if (damgetype = cuttingwheel) playsound 8CCUTWHX

            if (deflectAttack()) 
                terminate;

            SetResultValue(damageCalc(GetEventResult()));
			
			// ------------------------------------------------------------------

			if (isEnemy()) {
       			PlaySound(0,"8CPAIN00",CHAN_VOICE,1.0,false);
				type = GetUserVariable(0, "user_colorId");
				for (int i = 0; i < 5; i++) {
					Thing_SetTranslation(0, 68); delay(1);// CLR_BOSSPAIN
					Thing_SetTranslation(0, type); delay(1);
				}
			}
		break;		
	}
}

function void init(void) {
	for (int i = 0; i < ENEMY_SIZE+HERO_SIZE; i++) 
        ACTOR[i][0] = 0;    
	if (isMap8C || forcePhysics) {
		for (i = 0; i < 512; i++) 
			Sector_SetFriction(i,-96);
		DefinePowerAprop("8C Static Move Giver", "8C Static Move", APROP_Speed, 16.0, false);
		DefinePowerAprop("8C On actor gravity Giver", "8C On actor gravity", APROP_Gravity, 0.0, false);
	}
	if (isMap8C)
		ConsoleCommand("mm8bdm_sv_respawnprotection 0"); // side effect. pls give a hook
}

function void loadActors(void) {
	add8cHero("8C Megaman", 60, 20);
	add8cHero("8C Protoman", 40, 30);
	add8cHero("8C Bass", 60, 25);
	add8cHero("8C Roll", 60, 20);

	add8cEnemy("8C Blader", 60, 20);
	add8cEnemy("8C Big Eye", 60, 20);
	add8cEnemy("8C Blaster", 60, 20);
	add8cEnemy("8C Screw Driver", 60, 20);
	add8cEnemy("8C Kamadoma", 60, 20);
	add8cEnemy("8C Adhering Suzy", 60, 20);
	add8cEnemy("8C Manbu", 60, 20);
	add8cEnemy("8C Cutting Wheel", 60, 20);
}













function bool deflectAttack(void) {
	if (CheckInventory("8C Deflect")) {
		PlaySound(0,"8CPAIN02",CHAN_VOICE,1.0,false);
		int isValid = SetActivator(0, AAPTR_DAMAGE_INFLICTOR);
		SpawnForced("8C Deflect gfx", GetActorX(0), GetActorY(0), GetActorZ(0));
		if (isValid && !CheckFlag(0, "DONTREFLECT")) {
            SetPointer(AAPTR_TARGET, 0, AAPTR_DAMAGE_TARGET);
			SetActorVelocity(0, -GetActorVelY(0), GetActorVelX(0), -16.0, false, false);
		}
		return true;
	}
    return false;
}



function int damageCalc(int base) {
    SetActivator(0, AAPTR_DAMAGE_SOURCE);
    int level = getLevel();
    if (!level ||  
        (base>>14)) // if suicide/telefrag etc
        return base;

	int damage = base<<16;
	int puissance = calcStatLerp(getPuissance(CheckInventory("8C ID")),level);
	int strBuild = strParam(s:"\ca[", f:FixedDiv(Timer(),35), s:"] \c-", n:0, s:" LV \ck", d:level, s:" \ccpui ", d:puissance>>16);
    damage = FixedMul(damage/100,puissance);
	SetActivator(0, AAPTR_DAMAGE_TARGET);
	damage = decimalHP(damage);
	strBuild = strParam(s:strBuild,s:"\cc --> ", n:0, s:" -\ci", d:damage);
	log(s:strBuild);
	return damage;
}

			
// round damage dealt to integer, and store decimal part on the victim actor's inventory
function int decimalHP(int val) { // int isHeal
	if (!(val&0xFFFF))
		return val>>16;
	int decimalPoints = CheckInventory("8BDM HP");
	TakeInventory("8BDM HP", 0x1FFFF);
	if (decimalPoints & 0x10000)
		val += (decimalPoints & 0xFFFF);
	else
		val -= (decimalPoints & 0xFFFF);
	int rounded = roundf(val);
	if (rounded<val)
		GiveInventory("8BDM HP", (0x10000) | (val-rounded));
	else
		GiveInventory("8BDM HP", 			 (rounded-val));
	//if (CheckInventory("8BDM HP")&0x10000) 	log(s:"[ HP - ", f:CheckInventory("8BDM HP")&(0xFFFF), s:" ]"); 
	//else										log(s:"[ HP + ", f:CheckInventory("8BDM HP")&(0xFFFF), s:" ]"); 
	return rounded>>16;
}















	//////////////////////////////////////////////////////////
//                           Core                				//
	//////////////////////////////////////////////////////////

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Mod API ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

script "8C API" (int type, int arg1, int arg2, int arg3) {
	switch(type) {
		case API_8C_ADD_ACTOR:
			int name  = GetCvarString("8bdm_wepTag"), hp = GetCvar("8bdm_wepMult"), puissance = GetCvar("8bdm_wepMult2"); 
			if (!arg1) {
				int count = heroCount, limit = HERO_SIZE;
				heroCount++;
			}
			else {
				count = enemyCount, limit = ENEMY_SIZE;				
				enemyCount++;
				arg1 = HERO_SIZE;
			}
			delay(1);
			if (count < limit) {
				ACTOR[arg1+count][0] = name;
				if (hp<1) hp = 1; // ' -'
				ACTOR[arg1+count][1] = hp<<16;
				ACTOR[arg1+count][2] = puissance<<16;
			}
			else {
				if (!arg1) 	arg1 = "Hero";
				else 		arg1 = "Enemy";
				log(l:"8C_ACTOR_OVERFLOW", s:"\cc[ \ck", s:arg1, s:" \cg", d:count+1, s:" \cc/\ci ", d:limit, s:"\cc ]");
			}
		break;
		
		case API_8C_SPAWN_ENEMY:
			name = GetCvarString("8bdm_wepTag");
			arg1 = GetCvar("8bdm_wepMult");
			if (Timer() < 2) 
				delay(1);
			type = HERO_SIZE;
			while (true) {
				if (!strICmp(name,getName(type)))
					break;
				if (type == (HERO_SIZE+ENEMY_SIZE)) {
					Log(l:"8C_ENEMY_UNKNOWN", s:"\cc[ \ck", s:type, s:"\cc ]");
					SetResultValue(false);
					terminate;
				}
				type++;
			}

			arg2 = UniqueTID();
			arg3 = SpawnSpotFacingForced(name, arg1, arg2);
			if (!arg3) {
				Log(l:"8C_ENEMY_CANT_SPAWN", s:"\cc[ \ck", s:name, s:", on spot ", d:arg1, s:"\cc ]");
				SetResultValue(false);
				terminate;
			}
			SetActivator(arg2);
			if (type) GiveInventory("8C ID", type);
			arg1 = random(1,50);
			setLevel(arg1);
			healthFormula(arg1);

			arg2 = !random(0,1024);
			if (arg2) 
				GiveInventory("8C Shiny", 1);
			//tmp = MOB_COLOR;//+(arg2*MOB_COLOR_SIZE)+i;///+(arg3<<1);
			arg2 = 0;
			SetUserVariable(0,"user_8C_color", arg2); Thing_SetTranslation(0, arg2);
			Setactorposition(0,GetActorX(0)+128.0,GetActorY(0),GetActorZ(0),false);
			Thing_ChangeTID(0, 0);
			Log(s:"\cnspawn : \cc", s:name, s:" level \ck", d:arg1);
			SetResultValue(true);
		break;
	}
}





// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Main script  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

#DEFINE INCARNATION_INTRO_SPAWN_TIME 90
#DEFINE INCARNATION_INTRO_READY_TIME 15
#DEFINE INCARNATION_INTRO_TIME INCARNATION_INTRO_SPAWN_TIME + INCARNATION_INTRO_READY_TIME
#DEFINE INCARNATION_HP_FILL 40

#DEFINE CS_READY_ANIMATION 65

#DEFINE XY_DIST 64
#DEFINE Z_DIST 65
#DEFINE IS_GONE 66
#DEFINE COPY_VELOCITY 67
#DEFINE GET_VELOCITY 68
#DEFINE CHECK_COLLISION 69
#DEFINE SOLID_TOGGLE 70
#DEFINE GET_USERVAR 71
//#DEFINE NO_8C_FOG 72 // 8C.acs
//#DEFINE NO_8C_SPAWN_INVUL 73 // 8C.acs

#DEFINE CAMERA_TID 7800


script "8C" (int type, int arg1, int arg2, int arg3) {
	switch(type) {

								///////////////////////
								// Important scripts //
								///////////////////////

		/**
		* @arg1 int : actor id
		* @arg2 int : level
		* @arg3 bool : skip intro animation?
		*/
		case INCARNATE:		
			int class = arg1, level = 10;
			Log(n:0, s:">>>>   ", s:getName(class), s:" lv. ", d:level);
			if (class == -1)
				terminate;
			int name = getName(class);
			MorphActor(0,name,"",0x7FFFFFFF,MRF_WHENINVULNERABLE|MRF_FULLHEALTH|MRF_FAILNOLAUGH|MRF_NEWTIDBEHAVIOUR,"gfx","gfx");
			if(class) 
				GiveInventory("8C ID", class);
			setLevel(level);
			healthFormula(level);
			GiveInventory("BaseFlagPack",1);
			GiveInventory(StrParam(s:name, s:" onSpawn"), 1);
		break;

		case PHYSICS_8C:
			GiveInventory("8C Static Move Giver", 1);
			SetAirControl(8.392333); // 5.905 for airspeed = groundspeed
			
			/*
			while (true) { // airFriction control }}
			Player air movement was planned to have lower friction + slower player speed,
				resulting in jumps being hard to readjust direction, but gaining more momentum/speed (like doom jumps.)
			This, as a contract to ground movement - high friction + high player speed, resulting in good dodging/position,
			but not good to cover distances.

			It was dropped because modifying player's speed based on grounded/in air (with setactorproperty or powerspeed i.e)
			couldn't use client-side prediction to make player movement online smooth.
			See https://zdoom.org/wiki/Creating_multiplayer-friendly_ZScript

			Need Player.Forward/Side move properties but for in-air specific :D

			-----------------------------------------------------------------------------------------------

			Also for some reason when an actor (the player) is standing on a solid actor (i.e yoku block),
			the aircontrol (friction) stops applying, giving player a surge of speed
			We reposition the player 1 unit above the solid actor, with no gravity, just so aircontrol applies again (code below)
				
			Limitations though : there's still 1 tic of speed surge (when landing on the actor),
			also jump reproduction not accurate ; it allows jumping on the same time 't' when you land on the actor
			*/
			while(!isGone(0)) {
				if ((GetActorZ(0)-GetActorFloorZ(0))>=1.0)
					if (!checkFooting(-1.0)) {
						SetActorVelocity(0,GetActorVelX(0),GetActorVelY(0),0.0,false,false);
						SetActorPosition(0,GetActorX(0),GetActorY(0),GetActorZ(0)+1.0,false);
						GiveInventory("8C On actor gravity Giver", 1);
						do {
							delay(1);
							if (isGone(0)) 
								terminate;
							if (GetPlayerInput(-1,INPUT_BUTTONS)&BT_JUMP) {
								SetActorVelocity(0,GetActorVelX(0),GetActorVelY(0),GetActorProperty(0,APROP_JumpZ),false,false);
								break;
							}
						}  while (!checkFooting(-2.0));
						TakeInventory("8C On actor gravity", 1);
						continue;
					}
				delay(1);
			}
		break;

		case INTRO_ANIMATION:
			SetActorProperty(0, APROP_Health, 1);
			ACS_NamedExecuteWithResult("core_freezeplayer", 0, true);
			ACS_NamedExecuteWithResult("core_invulnerableplayer", 0, true);
			ACS_NamedExecuteWithResult("core_invisibleplayer", 0, true);
			ACS_NamedExecuteWithResult("core_nogravityplayer", 0, true);
			GiveInventory("noInteractionOn",1);
							
			arg3 = CAMERA_TID+PlayerNumber();
			arg2 = ActivatorTID();
			SpawnForced("8C Camera",0,0,0,arg3,0);
			SetActivator(arg3);
			SetPointer(AAPTR_TARGET,arg2);
			SetActivator(arg2);

			ACS_NamedExecuteWithResult("8C CS", CS_READY_ANIMATION, PlayerNumber());
			delay(INCARNATION_INTRO_READY_TIME);

			ACS_NamedExecuteWithResult("core_invisibleplayer", 0, false);
			ACS_NamedExecuteWithResult("core_nogravityplayer", 0, false);
			GiveInventory("noInteractionOff",1);
			SetActorState(0,"intro8C",true);

			// ---- INCARNATION_INTRO_SPAWN TIME start ---- //
			delay(35);
			type = ((GetActorProperty(0,APROP_SpawnHealth)-1)<<16)/INCARNATION_HP_FILL;
			for (int i=1; i <= INCARNATION_HP_FILL; i++) {
				SetActorProperty(0,APROP_Health, 1+((type*i)>>16));
				if (i%2) 
					LocalAmbientSound("8CHPFILL", 127);
				delay(1);
			}
			SetActorProperty(0,APROP_Health, GetActorProperty(0,APROP_SpawnHealth));
			delay(30);
			ACS_NamedExecuteWithResult("core_freezeplayer", 0, false);
			ACS_NamedExecuteWithResult("core_invulnerableplayer", 0, false);
			// ---- INCARNATION_INTRO_SPAWN TIME end ---- //
		break;








								///////////////////////
								// Utility   scripts //
								///////////////////////

		case XY_DIST:
			if (!arg1) arg1 = GetActorProperty(0, APROP_TARGETTID);
			SetResultValue(xyDistance(0,arg1));
		break;

		case Z_DIST:
			if (!arg1) arg1 = GetActorProperty(0, APROP_TARGETTID);
			SetResultValue(zDistance(0,arg1));
		break;

		case IS_GONE:
			SetResultValue(isGone(arg1));
		break;
		
		case COPY_VELOCITY:
			GiveInventory("8C follower",1);
			do {
				arg2 = ACS_NamedExecuteWithResult("8C", GET_VELOCITY, arg1);				
				SetActorVelocity(0, 
					((1-((arg2>>23)&0x2))*(arg2&0xFF))<<16, 
					((1-((arg2>>24)&0x2))*(arg2&0xFF00))<<8, 
					(1-((arg2>>25)&0x2))*(arg2&0xFF0000), 
				false, false);
				delay(1);
			} while (CheckInventory("8C follower"));
		break;

		case GET_VELOCITY:
			SetActivator(0, arg1);
			SetResultValue(
				(abs(GetActorVelX(0)>>16)&0xFF) |
				((abs(GetActorVelY(0)>>16)&0xFF) << 8) |
				((abs(GetActorVelZ(0)>>16)&0xFF) << 16) |
				((GetActorVelX(0)<0)<<24) |
				((GetActorVelY(0)<0)<<25) |
				((GetActorVelZ(0)<0)<<26)
			);
		break;

		// detect lateral collision with terrain/actors. Used i.e by Cutting Wheel to climb
		case CHECK_COLLISION:
			arg1 = GetActorAngle(0)+ 0.25*arg1;
			i = GetActorProperty(0,APROP_Radius)>>16;

			// increase this to help non axis aligned collision detection but at the cost of overall worsened collision accuracy
			arg3 = (i*5)/3;
			
			if (arg2) 	int tmp = "8C Check Collision";
			else 			tmp = "8C Check Terrain";

			arg2 = UniqueTID();
			while (true) {
				type = !Spawn(tmp,
					GetActorX(0) + (arg3 * cos(arg1)) - i*sin(arg1),
					GetActorY(0) + (arg3 * sin(arg1)) + i*cos(arg1),
					GetActorZ(0), arg2);
				if (type) break;
				type = !Spawn(tmp,
					GetActorX(0) + (arg3 * cos(arg1)) + i*sin(arg1),
					GetActorY(0) + (arg3 * sin(arg1)) - i*cos(arg1),
					GetActorZ(0)+GetActorProperty(0,APROP_Height)-12.0, arg2);
				break;
			}
			SetResultValue(type);
			Thing_Remove(arg2);
		break;

		// core_unsolidplayer but more simple, usable for monsters
		case SOLID_TOGGLE:
			if (!arg1) {
				GiveInventory("PlayerPropertyUnsolid", 1);
				GiveInventory("PlayerPropertySolidOff",1);
			}
			else if (CheckInventory("PlayerPropertyUnsolid")) {
				TakeInventory("PlayerPropertyUnsolid", 1);				
				if (!CheckInventory("PlayerPropertyUnsolid"))
					GiveInventory("PlayerPropertySolidOn", 1);
			}
		break;

		// to generalize
		case GET_USERVAR:
			if (arg1) SetActivator(0,arg1);
			SetResultValue(GetUserVariable(0, "user_colorId"));
		break;

		// 6b "map_teleportfog" script overwrite
		case NO_8C_FOG:
			if (Timer() < 2) delay(2);
			if (isMap8C) terminate;
			// edit end
			arg1 = ACS_NamedExecuteWithResult("core_getptrtid", AAPTR_TARGET);
			arg2 = UniqueTID();
			SpawnForced("TeleportFogFX", GetActorX(0), GetActorY(0), GetActorZ(0), arg2, 0);
			SetActivator(arg2);
			SetPointer(AAPTR_TARGET, arg1);
			SetActivator(arg1);
			Thing_SetTranslation(arg2, -1);
			Thing_ChangeTID(arg2, 0);
		break;
		
	
	}
}
#DEFINE CS_CAMERA 64
	#DEFINE INCARNATION_INTRO_CAMDIST 256.0
	#DEFINE INCARNATION_INTRO_ZOOM 20
script "8C CS" (int type, int arg1, int arg2, int arg3) CLIENTSIDE {
	int localPlayer = ConsolePlayerNumber();
	switch(type) {

		case CS_CAMERA:
			int camera = activatorTID();
			if (localPlayer != camera-CAMERA_TID) {
				Thing_Remove(0);
				terminate;
			}
			SetActivatorToTarget(0);
			int eyeLevel = (GetActorProperty(0,APROP_ViewHeight));
			int dt = INCARNATION_INTRO_CAMDIST/INCARNATION_INTRO_ZOOM;
			for (int i = INCARNATION_INTRO_TIME; i; i--) {
				ChangeCamera(camera,0,0);
				int z = -(GetActorZ(0)-GetActorFloorZ(0))+eyeLevel;
				Warp(camera, -4.0, 0, z, 0, WARPF_MOVEPTR | WARPF_NOCHECKPOSITION);
				SetActorPitch(camera,0);
				if (i <= INCARNATION_INTRO_ZOOM)	cameraExtend(camera, INCARNATION_INTRO_CAMDIST-((INCARNATION_INTRO_ZOOM-i)*dt));	
				else								cameraExtend(camera, INCARNATION_INTRO_CAMDIST);	
				ActorLookAt(camera,0,eyeLevel,0);
				delay(1);
			}
			Thing_Remove(camera);
		break;

		case CS_READY_ANIMATION:
			if (localPlayer != arg1) terminate;
			ACS_NamedExecuteWithResult("8C CS", 250);
			int base = -384.1;
			int baseTop = 384.1;
			int delta = 0;
			int upper = 0; int j = 0;
			int deltax = 16;
			for (j = 0; j < INCARNATION_INTRO_TIME; j++) {
				if(j >= (INCARNATION_INTRO_TIME-INCARNATION_INTRO_ZOOM)) upper+=2;
				for (i = 0; i < 3; i++) {
					// drawSB("8CINTRO7",
					// 	(baseTop-(delta<<16))-(256.0*i),
					// 	100.2-(upper<<16));
					
					drawSB("8CINTROB",
						(baseTop-(delta<<16))-(254.0*i),
						-12.0 -(upper<<16));//);
					drawSB("8CINTRO7",
						(base+(delta<<16))+(254.0*i),
						100.0+(upper<<16));
					
				}
				delta = (delta+8)%256;

				if (((j>>2)&0x1) || deltax) {
					//draw("8CINTRO2", 159.0-(deltax<<20), 139.0, 320, 280, 0.05, 1.0-(!!(deltax)<<15));
					//draw("8CINTRO3", 161.0+(deltax<<20), 141.0, 320, 280, 0.05, 1.0-(!!(deltax)<<15));
					if (deltax) 
						deltax--;
				}
				delay(1);
			}
		break;
	}
}

#DEFINE CAMERA_T 4
function void cameraExtend(int camera, int dist) {
	int dx = cos(GetActorAngle(camera))*CAMERA_T;
	int dy = sin(GetActorAngle(camera))*CAMERA_T;
	int dz = sin(GetActorPitch(camera))*CAMERA_T;
	int tMax = (dist/CAMERA_T)>>16;
	for (int t = 1; t <= tMax; t++) {
		int test = Warp(camera,
			GetActorX(camera)-dx, GetActorY(camera)-dy, GetActorZ(camera)-dz,
			0, WARPF_MOVEPTR | WARPF_ABSOLUTEPOSITION		
		);		
		if (!test) break;
	}
}



function void healthFormula(int level) {
	int hp = calcStatLerp(getHP(CheckInventory("8C ID")), level)>>16;
	SetActorProperty(0,APROP_SpawnHealth,hp); // note monsters max/spawn hp can't be modified at current time zandro versions
	SetActorProperty(0,APROP_Health,hp);
}






















	//////////////////////////////////////////////////////////
//                           Misc/utils            				//
	//////////////////////////////////////////////////////////

function int roundf(int f) { return (f+0.5)&0xFFFF0000; }
    
// from xover weapons 2.1.0
script "EarthQuake" (int strength, int duration, int range) {
	Radius_Quake(strength, duration, 0, range/64, 0); }

// from vanilla but /w zOffset param
function bool checkFooting(int zOffset) {
	int tid = UniqueTID();
	bool check = Spawn("8bdmFootholdCheck",GetActorX(0),GetActorY(0),GetActorZ(0)+zOffset,tid);
	Thing_Remove(tid);
	return check;
}

function bool isGone(int ptr) {
	if (ptr) {
		SetActivator(0,ptr);
		ptr = 0;
	} 
	int flags = ClassifyActor(ptr);
	return (flags & (ACTOR_WORLD | ACTOR_DEAD)) || ((flags & ACTOR_PLAYER) && PlayerIsSpectator(PlayerNumber()));
}




	//////////////////////////////////////////////////////////
//                           debug/tmp             				//
	//////////////////////////////////////////////////////////

	

// int theXalign = 0.1;
// int theYalign = 0.1;
// /*
// x
// .0 = positions center of box
// .1 = positions left edge of box
// .2 = positions right edge of box
// .4 = centers text inside box and aligns center
// .5 = centers text and aligns left edge
// .6 = centers text and aligns right edge
// For y:

// .0 = positions center of box
// .1 = positions top edge of box
// .2 = positions bottom edge of box*/

script "draw" (int x, int y, int scx, int scy) {
	draw("8CINTRO7", x<<16, y<<16, scx, scy, 2.0,1.0); // pukename draw 100 100 320 200
}

function void draw(str image, int x, int y, int xScreen, int yScreen, int time, int alpha) {
	SetHudSize(xScreen,yScreen,true); SetFont(image);
	HudMessageBold(s:"A";HUDMSG_PLAIN|HUDMSG_ALPHA ,Get_And_Inc_AssistDisplayID(),CR_UNTRANSLATED,x,y,time,alpha);
}

// basic version
function void drawB(str image, int x, int y, int xScreen, int yScreen) {
	draw(image, x, y, xScreen, yScreen, 0.04, 1.0);
}

// super basic version
function void drawSB(str image, int x, int y) {
	draw(image, x, y, 320, 200, 0.04, 1.0);
}

