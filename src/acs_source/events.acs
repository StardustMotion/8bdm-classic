
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Server-side  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

script "8C OPEN" OPEN {
	init();
	delay(2);
	startAct();
}

bool forcePhysics = false, isMap8C = false;
function void init(void) {
	forcePhysics = GetCvar("C8_physics");
	isMap8C = !strCmp(strLeft(strParam(n:PRINTNAME_LEVEL), 3),"8C-");

    if (!isGameAlreadyBooted()) 
		onFirstGameStart();

	if (isMap8C || forcePhysics) {
		for (int i = 0; i < 512; i++) 
			Sector_SetFriction(i,-96);
		DefinePowerAprop("8C Static Move Giver", "8C Static Move", APROP_Speed, 16.0, false);
		DefinePowerAprop("8C On actor gravity Giver", "8C On actor gravity", APROP_Gravity, 0.0, false);
	}
	DefinePowerAprop("8C Pacifist Giver", "8C Pacifist", APROP_Alpha, 0.62, NO);

	if (isMap8C) {
		drawBorders(4.0,0,0);
		// Map respawn
		if (getAct()) {
			log(s:"this is a respawn...");

		}
		// Not a respawn
		else {
			selectPlayer(0);
			setAct(1);
			setLives(3);
			i = countSelectedPlayers(true);
			setSelectedPlayers(i);
			setMinSurvivors((i/2)+1);
			ConsoleCommand(strParam(s:"sv_maxclients ", d:min(GetCvar("sv_maxclients"), MAX_C8_PLAYERS))); // GAMEMODE
			ConsoleCommand("mm8bdm_sv_respawnprotection 0"); // side effect / need a hook
		}

		// ---------
	}
}


#DEFINE ACT_TID 851
function void startAct(void) {
	int act = getAct()-1;
	log(s:"\cc------------\nSTART ACT \ci", d:getAct(), s:" \cclives\ci ",d:getLives(), s:" \ccsurvivorsNeeded\ci ", d:getMinSurvivors());
	setGoal(0);	
	setGameInTransition(false);	
	int index = 0, spawnPoint;
	for (int player = 0; player < MAX_C8_PLAYERS; player++) {
		if (PlayerInGame(player) && isSelectedPlayer(player)) {
			setExpPool(player,0);
			SetActivatorToPlayer(player);
			spawnPoint = ACT_TID+index+(act*10);
			SetActorPosition(0, GetActorX(spawnPoint), GetActorY(spawnPoint), GetActorZ(spawnPoint), false);
			SetActorAngle(0,GetActorAngle(spawnPoint));
			index = (index+1)&0x7;
			ACS_NamedExecuteWithResult("8C", INTRO_ANIMATION);
		}
	}
	stageMusic(false);
}





function void onFirstGameStart(void) {
	// Heroes
	for (int i = 0, count = 0; i < MAX_HERO; i++)
		if (strLen(strSanitize(__getHeroName(i)))) {
			setHeroFromIndex(count, i);
			Log(s:"Adding hero \cd", s:getHeroName(count), s:" (", d:i, s:")\c- on slot \cv", d:count);
			count++;
		}
	SetCVar(CVAR_HERO_SIZE, count);

	// Stages
	for (i = 0, count = 0; i < MAX_STAGE; i++)
		if (strLen(strSanitize(__getStageCode(i)))) {
			setStageFromIndex(count, i);
			Log(s:"Adding stage \ci", s:getStageCode(count), s:" (", d:i, s:")\c- on slot \cv", d:count);
			count++;
		}
	SetCVar(CVAR_STAGE_SIZE, count);

	// Resolve
	setGameAlreadyBooted();
}


script "8C ENTER" ENTER {
	delay(1);
	ACS_NamedExecuteWithResult("8C RPG", RPG_INCARNATE);
	if (isMap8C || forcePhysics) 	ACS_NamedExecuteWithResult("8C", PHYSICS_8C);
}
script "8C RESPAWN" RESPAWN {
	ACS_NamedExecuteWithResult("8C ENTER");
}

script "8C EVENT" (int type, int arg1, int arg2) EVENT {
	switch(type) {
		case GAMEEVENT_PLAYERCONNECT :
            setLogin(arg1, "");
			for (int i = -1; i < MAX_SLOTS; i++)
				dbEvent(DB_DELETE_HERO,arg1,NULL,NULL);
		break;

		case GAMEEVENT_ACTOR_DAMAGED:
			if (!isMap8C) terminate;
			//if (damgetype = cuttingwheel) playsound 8CCUTWHX
        	if (deflectAttack() | isPacifist()) {
    		    SetResultValue(0);
				terminate;
			}
			
			SetResultValue(damageCalculation(GetEventResult()));

			int enemy = isEnemy();
			if (enemy) {
				arg2 = getActorID();
				i = getActorRank();
				ACS_NamedExecuteWithResult("8C CS", CS_ENEMY_PAIN);
			}
			
			delay(1);
			if (isGone(NULL)) {
				if (enemy) enemyExpGain(arg2,i);
			}		
		break;

        	
    }
}

script "8C LEAVES" (int player) DISCONNECT {
	delay(1);
	AmbientSound("8CDEATH", 127);
	//ACS_NamedExecuteWithResult("8C", GAME_STATUS_CHECK);
}

script "8C DEATH" DEATH  {
	if (!isMap8C) terminate;
	AmbientSound("8CDEATH", 127);
	ACS_NamedExecuteWithResult("8C", GAME_STATUS_CHECK);
}
    


	
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Client-side  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

    

script "8C NET CS" (int type) NET CLIENTSIDE {
	switch(type) {
		case NET_CS_START_SCREEN:
			ACS_NamedExecuteWithResult("8C CS", CS_START_SCREEN);
		break;
	}
}


#DEFINE ENEMY_COLOR 7247 
#DEFINE ENEMY_VERSIONS 3
#DEFINE ENEMY_COLOR_SIZE ENEMY_VERSIONS<<1

script "8C OPEN CS" OPEN CLIENTSIDE {
	delay(25);
	createTranslations();
}

script "8C LEAVES CS" (int player) DISCONNECT CLIENTSIDE {
	if (ConsolePlayerNumber()==player) {
		eraseAll(HUD_ID_HERO,16);
		eraseAll(HUD_ID_EFFECTS,8);
	}
}